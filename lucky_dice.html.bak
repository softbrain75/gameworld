<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="manifest" href="manifest.json">
    <title>럭키 다이스 - 게임세상</title>
    <style>
        :root {
            --vh: 1vh;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Malgun Gothic', sans-serif;
            background: linear-gradient(135deg, #8E44AD 0%, #3498DB 100%);
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .menu-screen, .gameover-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(135deg, #8E44AD 0%, #3498DB 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .menu-content, .gameover-content {
            background: rgba(0, 0, 0, 0.9);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            color: white;
            max-width: 90%;
            width: 400px;
            border: 3px solid #9B59B6;
            box-shadow: 0 0 40px rgba(155, 89, 182, 0.5);
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #8E44AD, #3498DB);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-icon {
            font-size: 4em;
            margin-bottom: 20px;
            animation: roll 1s ease-in-out infinite;
        }

        @keyframes roll {
            0%, 100% { transform: rotate(0deg); }
            25% { transform: rotate(90deg); }
            50% { transform: rotate(180deg); }
            75% { transform: rotate(270deg); }
        }

        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: left;
            font-size: 0.9em;
        }

        .instructions p {
            margin: 8px 0;
            line-height: 1.5;
        }

        .btn {
            background: linear-gradient(45deg, #8E44AD, #3498DB);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.5em;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            box-shadow: 0 0 30px rgba(155, 89, 182, 0.5);
            transition: transform 0.2s;
            font-weight: bold;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .btn:active {
            transform: scale(0.95);
        }

        .back-btn {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            z-index: 100;
            font-size: 0.9em;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        #gameCanvas {
            display: block;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(180deg, #2C3E50 0%, #34495E 100%);
            touch-action: none;
        }

        .hidden {
            display: none;
        }

        .high-score {
            background: rgba(155, 89, 182, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border: 2px solid rgba(155, 89, 182, 0.5);
        }

        .score-display {
            font-size: 3em;
            margin: 20px 0;
            color: #9B59B6;
            text-shadow: 0 0 20px #9B59B6;
        }
    </style>
</head>
<body>
    <a href="index.html" class="back-btn">← 홈으로</a>

    <!-- Menu Screen -->
    <div id="menuScreen" class="menu-screen">
        <div class="menu-content">
            <div class="game-icon">🎲</div>
            <h1>럭키 다이스</h1>
            <p style="color: #9B59B6; margin-bottom: 20px;">행운을 시험하세요!</p>

            <div id="highScore" class="high-score hidden">
                <div style="opacity: 0.8;">🏆 최고 점수</div>
                <div style="font-size: 2em; font-weight: bold; color: #9B59B6;" id="highScoreValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🎲 시작</button>

            <div class="instructions">
                <p style="font-weight: bold; color: #9B59B6; margin-bottom: 10px;">🎮 게임 방법</p>
                <p>🎲 주사위를 굴려 점수를 획득하세요!</p>
                <p>🎯 목표: 10번 굴려서 최고 점수!</p>
                <p>⚡ 더블(같은 숫자 2개): 점수 2배!</p>
                <p>✨ 트리플(같은 숫자 3개): 점수 5배!</p>
                <p>💎 풀하우스(2+3): 보너스 50점!</p>
                <p>🎰 스트레이트(연속 숫자): 보너스 100점!</p>
            </div>
        </div>
    </div>

    <!-- Game Over Screen -->
    <div id="gameoverScreen" class="gameover-screen hidden">
        <div class="gameover-content">
            <div class="game-icon">🎲</div>
            <h1 id="gameoverTitle">게임 종료!</h1>

            <div class="score-display" id="finalScore">0</div>
            <div style="opacity: 0.8; margin-bottom: 20px;">최종 점수</div>

            <div id="newRecord" class="hidden" style="color: #9B59B6; font-size: 1.2em; margin: 10px 0;">
                🎉 신기록! 🎉
            </div>

            <div id="highScoreDisplay" class="high-score hidden">
                <div style="opacity: 0.8;">역대 최고 점수</div>
                <div style="font-size: 1.5em; font-weight: bold; color: #9B59B6;" id="highScoreDisplayValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🔄 다시하기</button>
        </div>
    </div>

    <!-- Game Screen -->
    <canvas id="gameCanvas" class="hidden"></canvas>

    <script>
        // Viewport height fix
        function setVH() {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        }
        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', setVH);

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Game state
        let gameState = 'menu';
        let score = 0;
        let rollsLeft = 10;
        let dice = [0, 0, 0];
        let rolling = false;
        let rollAnimation = 0;
        let bestScore = localStorage.getItem('luckyDice_best') || 0;

        // Sound effects
        let audioContext = null;

        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            if (audioContext.state === 'suspended') {
                audioContext.resume();
            }
        }

        function playSound(soundType) {
            try {
                initAudio();

                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();

                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);

                switch(soundType) {
                    case 'roll':
                        oscillator.frequency.value = 400;
                        gainNode.gain.value = 0.08;
                        oscillator.type = 'sine';
                        break;

                    case 'bonus':
                        oscillator.frequency.value = 800;
                        gainNode.gain.value = 0.12;
                        oscillator.type = 'sine';
                        break;

                    case 'score':
                        oscillator.frequency.value = 600;
                        gainNode.gain.value = 0.10;
                        oscillator.type = 'sine';
                        break;
                }

                oscillator.start();
                oscillator.stop(audioContext.currentTime + 0.1);
            } catch (e) {}
        }

        // Roll dice
        function rollDice() {
            if (rolling || rollsLeft <= 0) return;

            rolling = true;
            rollAnimation = 20;
            playSound('roll');

            const interval = setInterval(() => {
                rollAnimation--;
                dice = [
                    Math.floor(Math.random() * 6) + 1,
                    Math.floor(Math.random() * 6) + 1,
                    Math.floor(Math.random() * 6) + 1
                ];

                if (rollAnimation <= 0) {
                    clearInterval(interval);
                    rolling = false;
                    rollsLeft--;
                    calculateScore();
                }
            }, 50);
        }

        // Calculate score
        function calculateScore() {
            const sum = dice.reduce((a, b) => a + b, 0);
            const sorted = [...dice].sort();

            let points = sum;
            let message = '';

            // Check for special combinations
            if (dice[0] === dice[1] && dice[1] === dice[2]) {
                // Triple
                points = sum * 5;
                message = '트리플! 5배 점수! ✨';
                playSound('bonus');
            } else if (dice[0] === dice[1] || dice[1] === dice[2] || dice[0] === dice[2]) {
                // Double
                points = sum * 2;
                message = '더블! 2배 점수! ⚡';
                playSound('score');
            } else if (
                (sorted[0] === sorted[1] - 1 && sorted[1] === sorted[2] - 1)
            ) {
                // Straight
                points = sum + 100;
                message = '스트레이트! +100점! 🎰';
                playSound('bonus');
            } else {
                playSound('score');
            }

            score += points;

            // Show message
            if (message) {
                showMessage(message);
            }

            if (rollsLeft <= 0) {
                setTimeout(endGame, 1500);
            }
        }

        let messageTimer = null;
        let currentMessage = '';

        function showMessage(msg) {
            currentMessage = msg;
            if (messageTimer) clearTimeout(messageTimer);
            messageTimer = setTimeout(() => {
                currentMessage = '';
            }, 2000);
        }

        // Draw dice
        function drawDie(x, y, size, value) {
            // Die background
            ctx.fillStyle = 'white';
            ctx.shadowBlur = 15;
            ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
            ctx.fillRect(x, y, size, size);
            ctx.shadowBlur = 0;

            // Border
            ctx.strokeStyle = '#333';
            ctx.lineWidth = 2;
            ctx.strokeRect(x, y, size, size);

            // Dots
            ctx.fillStyle = '#333';
            const dotSize = size / 10;
            const offset = size / 4;

            const positions = {
                1: [[size/2, size/2]],
                2: [[offset, offset], [size-offset, size-offset]],
                3: [[offset, offset], [size/2, size/2], [size-offset, size-offset]],
                4: [[offset, offset], [size-offset, offset], [offset, size-offset], [size-offset, size-offset]],
                5: [[offset, offset], [size-offset, offset], [size/2, size/2], [offset, size-offset], [size-offset, size-offset]],
                6: [[offset, offset], [size-offset, offset], [offset, size/2], [size-offset, size/2], [offset, size-offset], [size-offset, size-offset]]
            };

            if (positions[value]) {
                positions[value].forEach(([dx, dy]) => {
                    ctx.beginPath();
                    ctx.arc(x + dx, y + dy, dotSize, 0, Math.PI * 2);
                    ctx.fill();
                });
            }
        }

        // Draw game
        function draw() {
            // Background gradient
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#2C3E50');
            gradient.addColorStop(1, '#34495E');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw dice
            const dieSize = 100;
            const spacing = 20;
            const totalWidth = dieSize * 3 + spacing * 2;
            const startX = (canvas.width - totalWidth) / 2;
            const startY = canvas.height / 2 - dieSize / 2;

            dice.forEach((value, i) => {
                const x = startX + (dieSize + spacing) * i;
                const y = startY + (rolling ? Math.sin(rollAnimation + i) * 10 : 0);
                drawDie(x, y, dieSize, value || 1);
            });

            // Draw UI
            ctx.fillStyle = 'white';
            ctx.font = 'bold 40px Arial';
            ctx.textAlign = 'left';
            ctx.fillText(`점수: ${score}`, 20, 50);

            ctx.textAlign = 'right';
            ctx.fillText(`🎲 남은 횟수: ${rollsLeft}`, canvas.width - 20, 50);

            // Draw roll button
            if (!rolling && rollsLeft > 0) {
                const btnWidth = 200;
                const btnHeight = 60;
                const btnX = canvas.width / 2 - btnWidth / 2;
                const btnY = canvas.height - 120;

                ctx.fillStyle = '#9B59B6';
                ctx.shadowBlur = 20;
                ctx.shadowColor = '#9B59B6';
                ctx.fillRect(btnX, btnY, btnWidth, btnHeight);
                ctx.shadowBlur = 0;

                ctx.fillStyle = 'white';
                ctx.font = 'bold 30px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('굴리기! 🎲', canvas.width / 2, btnY + 40);
            }

            // Draw message
            if (currentMessage) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                ctx.fillRect(0, canvas.height / 2 - 100, canvas.width, 80);

                ctx.fillStyle = '#FFD700';
                ctx.font = 'bold 30px Arial';
                ctx.textAlign = 'center';
                ctx.fillText(currentMessage, canvas.width / 2, canvas.height / 2 - 50);
            }
        }

        // Handle tap
        canvas.addEventListener('click', (e) => {
            if (gameState !== 'playing' || rolling || rollsLeft <= 0) return;

            const btnWidth = 200;
            const btnHeight = 60;
            const btnX = canvas.width / 2 - btnWidth / 2;
            const btnY = canvas.height - 120;

            if (e.clientX >= btnX && e.clientX <= btnX + btnWidth &&
                e.clientY >= btnY && e.clientY <= btnY + btnHeight) {
                rollDice();
            }
        });

        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const touch = e.touches[0];

            if (gameState !== 'playing' || rolling || rollsLeft <= 0) return;

            const btnWidth = 200;
            const btnHeight = 60;
            const btnX = canvas.width / 2 - btnWidth / 2;
            const btnY = canvas.height - 120;

            if (touch.clientX >= btnX && touch.clientX <= btnX + btnWidth &&
                touch.clientY >= btnY && touch.clientY <= btnY + btnHeight) {
                rollDice();
            }
        });

        // Game loop
        function gameLoop() {
            if (gameState !== 'playing') return;

            draw();
            requestAnimationFrame(gameLoop);
        }

        // Start game
        window.startGame = function() {
            document.getElementById('menuScreen').classList.add('hidden');
            document.getElementById('gameoverScreen').classList.add('hidden');
            canvas.classList.remove('hidden');

            gameState = 'playing';
            score = 0;
            rollsLeft = 10;
            dice = [1, 1, 1];
            rolling = false;
            currentMessage = '';

            requestAnimationFrame(gameLoop);
        };

        // End game
        function endGame() {
            gameState = 'gameover';

            document.getElementById('finalScore').textContent = score;

            let title = '게임 종료!';
            if (score >= 300) {
                title = '대박! 🎲🎲🎲';
            } else if (score >= 200) {
                title = '훌륭해요! 🎲🎲';
            } else if (score >= 100) {
                title = '좋아요! 🎲';
            }
            document.getElementById('gameoverTitle').textContent = title;

            const isNewRecord = score > bestScore;
            if (isNewRecord) {
                bestScore = score;
                localStorage.setItem('luckyDice_best', bestScore);
                document.getElementById('newRecord').classList.remove('hidden');
            } else {
                document.getElementById('newRecord').classList.add('hidden');
            }

            if (bestScore > 0 && !isNewRecord) {
                document.getElementById('highScoreDisplay').classList.remove('hidden');
                document.getElementById('highScoreDisplayValue').textContent = bestScore;
            } else {
                document.getElementById('highScoreDisplay').classList.add('hidden');
            }

            canvas.classList.add('hidden');
            document.getElementById('gameoverScreen').classList.remove('hidden');
        }

        // Initialize
        if (bestScore > 0) {
            document.getElementById('highScore').classList.remove('hidden');
            document.getElementById('highScoreValue').textContent = bestScore;
        }
    </script>
    <script>
        // Auto fullscreen on load
        function enterFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen().catch(err => console.log(err));
            } else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
        }

        // Try on first user interaction
        let hasTriedFullscreen = false;
        document.addEventListener("click", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });

        document.addEventListener("touchstart", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });
    </script>
</body>
</html>
