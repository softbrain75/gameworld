<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="manifest" href="manifest.json">
    <title>버블 팝 - 게임세상</title>
    <style>
        :root {
            --vh: 1vh;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Malgun Gothic', sans-serif;
            background: linear-gradient(135deg, #FF69B4 0%, #FFB6C1 100%);
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .menu-screen, .gameover-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(135deg, #FF69B4 0%, #FFB6C1 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .menu-content, .gameover-content {
            background: rgba(0, 0, 0, 0.9);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            color: white;
            max-width: 90%;
            width: 400px;
            border: 3px solid #FF1493;
            box-shadow: 0 0 40px rgba(255, 20, 147, 0.5);
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #FF1493, #FF69B4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-icon {
            font-size: 4em;
            margin-bottom: 20px;
            animation: bounce 0.5s ease-in-out infinite;
        }

        @keyframes bounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: left;
            font-size: 0.9em;
        }

        .instructions p {
            margin: 8px 0;
            line-height: 1.5;
        }

        .btn {
            background: linear-gradient(45deg, #FF1493, #FF69B4);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.5em;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            box-shadow: 0 0 30px rgba(255, 20, 147, 0.5);
            transition: transform 0.2s;
            font-weight: bold;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .btn:active {
            transform: scale(0.95);
        }

        .back-btn {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            z-index: 100;
            font-size: 0.9em;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        #gameCanvas {
            display: block;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(180deg, #FFB6C1 0%, #FFC0CB 50%, #FFE4E1 100%);
            touch-action: none;
        }

        .hidden {
            display: none;
        }

        .high-score {
            background: rgba(255, 20, 147, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border: 2px solid rgba(255, 20, 147, 0.5);
        }

        .score-display {
            font-size: 3em;
            margin: 20px 0;
            color: #FF1493;
            text-shadow: 0 0 20px #FF1493;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 20px 0;
        }

        .stat-box {
            background: rgba(255, 20, 147, 0.2);
            padding: 15px;
            border-radius: 10px;
            border: 2px solid rgba(255, 20, 147, 0.5);
        }
    </style>
</head>
<body>
    <a href="index.html" class="back-btn">← 홈으로</a>

    <!-- Menu Screen -->
    <div id="menuScreen" class="menu-screen">
        <div class="menu-content">
            <div class="game-icon">🎈</div>
            <h1>버블 팝</h1>
            <p style="color: #FF1493; margin-bottom: 20px;">풍선을 터뜨려요!</p>

            <div id="highScore" class="high-score hidden">
                <div style="opacity: 0.8;">🏆 최고 점수</div>
                <div style="font-size: 2em; font-weight: bold; color: #FF1493;" id="highScoreValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🎈 시작</button>

            <div class="instructions">
                <p style="font-weight: bold; color: #FF1493; margin-bottom: 10px;">🎮 게임 방법</p>
                <p>🎈 떠오르는 풍선을 터치해서 터뜨리세요!</p>
                <p>💥 큰 풍선은 더 많은 점수를 줍니다!</p>
                <p>⏱️ 30초 안에 최대한 많이 터뜨리세요!</p>
                <p>🌈 다양한 색상의 풍선들!</p>
                <p>✨ 시원한 터지는 효과와 소리!</p>
            </div>
        </div>
    </div>

    <!-- Game Over Screen -->
    <div id="gameoverScreen" class="gameover-screen hidden">
        <div class="gameover-content">
            <div class="game-icon">🎈</div>
            <h1 id="gameoverTitle">게임 오버!</h1>

            <div class="score-display" id="finalScore">0</div>
            <div style="opacity: 0.8; margin-bottom: 20px;">최종 점수</div>

            <div id="newRecord" class="hidden" style="color: #FF1493; font-size: 1.2em; margin: 10px 0;">
                🎉 신기록! 🎉
            </div>

            <div class="stats-grid">
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">터뜨린 풍선</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="poppedCount">0</div>
                </div>
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">놓친 풍선</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="missedCount">0</div>
                </div>
            </div>

            <div id="highScoreDisplay" class="high-score hidden">
                <div style="opacity: 0.8;">역대 최고 점수</div>
                <div style="font-size: 1.5em; font-weight: bold; color: #FF1493;" id="highScoreDisplayValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🔄 다시하기</button>
        </div>
    </div>

    <!-- Game Screen -->
    <canvas id="gameCanvas" class="hidden"></canvas>

    <script>
        // Viewport height fix
        function setVH() {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        }
        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', setVH);

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Game state
        let gameState = 'menu';
        let score = 0;
        let poppedCount = 0;
        let missedCount = 0;
        let timeLeft = 30;
        let bubbles = [];
        let particles = [];
        let bestScore = localStorage.getItem('bubblePop_best') || 0;

        const colors = ['#FF1493', '#FF69B4', '#FFB6C1', '#FFC0CB', '#FF6347', '#FFA500', '#FFD700'];

        // Sound effects
        let audioContext = null;

        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            if (audioContext.state === 'suspended') {
                audioContext.resume();
            }
        }

        function playSound(frequency) {
            try {
                initAudio();

                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();

                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);

                oscillator.frequency.value = frequency;
                gainNode.gain.value = 0.10;
                oscillator.type = 'sine';

                oscillator.start();
                oscillator.stop(audioContext.currentTime + 0.1);
            } catch (e) {}
        }

        // Bubble class
        class Bubble {
            constructor() {
                this.radius = Math.random() * 30 + 20;
                this.x = Math.random() * (canvas.width - this.radius * 2) + this.radius;
                this.y = canvas.height + this.radius;
                this.speed = Math.random() * 2 + 1;
                this.color = colors[Math.floor(Math.random() * colors.length)];
                this.wobble = Math.random() * Math.PI * 2;
                this.wobbleSpeed = Math.random() * 0.05 + 0.02;
            }

            update() {
                this.y -= this.speed;
                this.wobble += this.wobbleSpeed;
                this.x += Math.sin(this.wobble) * 0.5;
            }

            draw() {
                // Bubble gradient
                const gradient = ctx.createRadialGradient(
                    this.x - this.radius * 0.3,
                    this.y - this.radius * 0.3,
                    this.radius * 0.1,
                    this.x,
                    this.y,
                    this.radius
                );
                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');
                gradient.addColorStop(0.5, this.color);
                gradient.addColorStop(1, 'rgba(0, 0, 0, 0.2)');

                ctx.fillStyle = gradient;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fill();

                // Highlight
                ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
                ctx.beginPath();
                ctx.arc(this.x - this.radius * 0.3, this.y - this.radius * 0.3, this.radius * 0.2, 0, Math.PI * 2);
                ctx.fill();

                // Border
                ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.stroke();
            }

            contains(x, y) {
                const dist = Math.sqrt(Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2));
                return dist < this.radius;
            }
        }

        // Particle class
        class Particle {
            constructor(x, y, color) {
                this.x = x;
                this.y = y;
                this.vx = (Math.random() - 0.5) * 10;
                this.vy = (Math.random() - 0.5) * 10;
                this.life = 1;
                this.color = color;
                this.size = Math.random() * 8 + 4;
            }

            update() {
                this.x += this.vx;
                this.y += this.vy;
                this.vy += 0.3;
                this.life -= 0.02;
            }

            draw() {
                ctx.globalAlpha = this.life;
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.globalAlpha = 1;
            }
        }

        // Spawn bubble
        function spawnBubble() {
            bubbles.push(new Bubble());
        }

        // Handle tap
        function handleTap(x, y) {
            for (let i = bubbles.length - 1; i >= 0; i--) {
                if (bubbles[i].contains(x, y)) {
                    const bubble = bubbles[i];
                    const points = Math.floor(bubble.radius);
                    score += points;
                    poppedCount++;

                    // Create particles
                    for (let j = 0; j < 15; j++) {
                        particles.push(new Particle(bubble.x, bubble.y, bubble.color));
                    }

                    // Play sound (higher pitch for smaller bubbles)
                    playSound(800 - bubble.radius * 5);

                    bubbles.splice(i, 1);
                    return;
                }
            }
        }

        // Touch/click events
        canvas.addEventListener('click', (e) => {
            handleTap(e.clientX, e.clientY);
        });

        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            for (let touch of e.touches) {
                handleTap(touch.clientX, touch.clientY);
            }
        });

        // Update game
        function update() {
            // Update bubbles
            for (let i = bubbles.length - 1; i >= 0; i--) {
                bubbles[i].update();

                // Remove if off screen
                if (bubbles[i].y + bubbles[i].radius < 0) {
                    bubbles.splice(i, 1);
                    missedCount++;
                }
            }

            // Update particles
            for (let i = particles.length - 1; i >= 0; i--) {
                particles[i].update();
                if (particles[i].life <= 0) {
                    particles.splice(i, 1);
                }
            }

            // Spawn new bubbles
            if (Math.random() < 0.03) {
                spawnBubble();
            }
        }

        // Draw game
        function draw() {
            // Background gradient
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#FFB6C1');
            gradient.addColorStop(0.5, '#FFC0CB');
            gradient.addColorStop(1, '#FFE4E1');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw bubbles
            bubbles.forEach(bubble => bubble.draw());

            // Draw particles
            particles.forEach(particle => particle.draw());

            // Draw UI
            ctx.fillStyle = 'white';
            ctx.strokeStyle = '#FF1493';
            ctx.lineWidth = 3;
            ctx.font = 'bold 40px Arial';
            ctx.textAlign = 'left';
            ctx.strokeText(`점수: ${score}`, 20, 50);
            ctx.fillText(`점수: ${score}`, 20, 50);

            ctx.textAlign = 'right';
            ctx.strokeText(`⏱️ ${timeLeft}s`, canvas.width - 20, 50);
            ctx.fillText(`⏱️ ${timeLeft}s`, canvas.width - 20, 50);
        }

        // Game loop
        function gameLoop() {
            if (gameState !== 'playing') return;

            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        // Timer
        let timerInterval;
        function startTimer() {
            timerInterval = setInterval(() => {
                timeLeft--;
                if (timeLeft <= 0) {
                    endGame();
                }
            }, 1000);
        }

        // Start game
        window.startGame = function() {
            document.getElementById('menuScreen').classList.add('hidden');
            document.getElementById('gameoverScreen').classList.add('hidden');
            canvas.classList.remove('hidden');

            gameState = 'playing';
            score = 0;
            poppedCount = 0;
            missedCount = 0;
            timeLeft = 30;
            bubbles = [];
            particles = [];

            startTimer();
            requestAnimationFrame(gameLoop);
        };

        // End game
        function endGame() {
            gameState = 'gameover';
            clearInterval(timerInterval);

            document.getElementById('finalScore').textContent = score;
            document.getElementById('poppedCount').textContent = poppedCount;
            document.getElementById('missedCount').textContent = missedCount;

            let title = '게임 오버!';
            if (score >= 500) {
                title = '풍선 마스터! 🎈🎈🎈';
            } else if (score >= 300) {
                title = '훌륭해요! 🎈🎈';
            } else if (score >= 150) {
                title = '좋아요! 🎈';
            }
            document.getElementById('gameoverTitle').textContent = title;

            const isNewRecord = score > bestScore;
            if (isNewRecord) {
                bestScore = score;
                localStorage.setItem('bubblePop_best', bestScore);
                document.getElementById('newRecord').classList.remove('hidden');
            } else {
                document.getElementById('newRecord').classList.add('hidden');
            }

            if (bestScore > 0 && !isNewRecord) {
                document.getElementById('highScoreDisplay').classList.remove('hidden');
                document.getElementById('highScoreDisplayValue').textContent = bestScore;
            } else {
                document.getElementById('highScoreDisplay').classList.add('hidden');
            }

            canvas.classList.add('hidden');
            document.getElementById('gameoverScreen').classList.remove('hidden');
        }

        // Initialize
        if (bestScore > 0) {
            document.getElementById('highScore').classList.remove('hidden');
            document.getElementById('highScoreValue').textContent = bestScore;
        }
    </script>
    <script>
        // Auto fullscreen on load
        function enterFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen().catch(err => console.log(err));
            } else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
        }

        // Try on first user interaction
        let hasTriedFullscreen = false;
        document.addEventListener("click", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });

        document.addEventListener("touchstart", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });
    </script>
</body>
</html>
