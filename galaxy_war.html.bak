<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link rel="manifest" href="manifest.json">
    <meta name="mobile-web-app-capable" content="yes">
    <title>갤럭시 워 - 게임세상</title>
    <style>
        :root {
            --vh: 1vh;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Malgun Gothic', sans-serif;
            background: #000000;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .menu-screen, .gameover-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(135deg, #0a0a2e 0%, #1a1a4e 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .menu-content, .gameover-content {
            background: rgba(0, 0, 0, 0.9);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            color: white;
            max-width: 90%;
            width: 400px;
            border: 2px solid #00ffff;
            box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #00ffff, #0088ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-icon {
            font-size: 4em;
            margin-bottom: 20px;
        }

        .instructions {
            background: rgba(0, 50, 100, 0.5);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: left;
            font-size: 0.9em;
        }

        .instructions p {
            margin: 8px 0;
            line-height: 1.5;
        }

        .btn {
            background: linear-gradient(45deg, #00ffff, #0088ff);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.5em;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.4);
            transition: transform 0.2s;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .btn:active {
            transform: scale(0.95);
        }

        .back-btn {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(0, 255, 255, 0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            z-index: 100;
            font-size: 0.9em;
            border: 1px solid rgba(0, 255, 255, 0.5);
        }

        .game-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            width: 100%;
            position: relative;
        }

        .stats {
            display: flex;
            justify-content: space-around;
            padding: 10px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            font-size: 1em;
            border-bottom: 1px solid rgba(0, 255, 255, 0.3);
        }

        .stat-item {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .stat-label {
            font-size: 0.7em;
            opacity: 0.8;
            color: #00ffff;
        }

        .stat-value {
            font-size: 1.3em;
            font-weight: bold;
        }

        canvas {
            flex: 1;
            width: 100%;
            touch-action: none;
            cursor: crosshair;
            background: #000000;
        }

        .hidden {
            display: none;
        }

        .high-score {
            background: rgba(255, 215, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border: 2px solid rgba(255, 215, 0, 0.5);
        }

        .score-display {
            font-size: 3em;
            margin: 20px 0;
            color: #ffd700;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 20px 0;
        }

        .stat-box {
            background: rgba(0, 100, 200, 0.3);
            padding: 15px;
            border-radius: 10px;
            border: 1px solid rgba(0, 255, 255, 0.3);
        }

        .hint {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 255, 255, 0.8);
            color: #000;
            padding: 10px 20px;
            border-radius: 20px;
            font-weight: bold;
            animation: fadeOut 3s forwards;
        }

        @keyframes fadeOut {
            0%, 70% { opacity: 1; }
            100% { opacity: 0; }
        }

    </style>
</head>
<body>
    <a href="index.html" class="back-btn">← 홈으로</a>

    <!-- Menu Screen -->
    <div id="menuScreen" class="menu-screen">
        <div class="menu-content">
            <div class="game-icon">🚀🎯</div>
            <h1>갤럭시 워</h1>
            <p style="color: #00ffff; margin-bottom: 20px;">우주 비행선 슈팅 게임!</p>

            <div id="highScore" class="high-score hidden">
                <div style="opacity: 0.8;">🏆 최고 기록</div>
                <div style="font-size: 2em; font-weight: bold; color: #ffd700;" id="highScoreValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🚀 출격</button>

            <div class="instructions">
                <p style="font-weight: bold; color: #00ffff; margin-bottom: 10px;">🎮 게임 방법</p>
                <p>🖱️ 드래그해서 화면 이동</p>
                <p>🎯 조준선 안에 적을 넣으세요</p>
                <p>🔥 조준선 안을 클릭하면 발사!</p>
                <p>📡 우측 하단 레이더로 적 위치 확인</p>
                <p>💫 5가지 적 타입별 다른 폭발 효과</p>
                <p>⚡ 적이 화면을 벗어나면 생명 감소</p>
            </div>
        </div>
    </div>

    <!-- Game Over Screen -->
    <div id="gameoverScreen" class="gameover-screen hidden">
        <div class="gameover-content">
            <div class="game-icon">💥</div>
            <h1>임무 종료</h1>

            <div class="score-display" id="finalScore">0</div>
            <div id="newRecord" class="hidden" style="color: #ffd700; font-size: 1.2em; margin: 10px 0;">
                🎉 신기록! 🎉
            </div>

            <div class="stats-grid">
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">격파</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="killCount">0</div>
                </div>
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">최대 콤보</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="maxComboDisplay">0</div>
                </div>
            </div>

            <div id="highScoreDisplay" class="high-score hidden">
                <div style="opacity: 0.8;">최고 기록</div>
                <div style="font-size: 1.5em; font-weight: bold; color: #ffd700;" id="highScoreDisplayValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🔄 재도전</button>
        </div>
    </div>

    <!-- Game Screen -->
    <div id="gameContainer" class="game-container hidden">
        <div class="stats">
            <div class="stat-item">
                <div class="stat-label">점수</div>
                <div class="stat-value" id="score">0</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">콤보</div>
                <div class="stat-value" id="combo">0</div>
            </div>
            <div class="stat-item">
                <div class="stat-label">생명</div>
                <div class="stat-value" id="lives">5</div>
            </div>
        </div>
        <canvas id="gameCanvas"></canvas>
    </div>

    <!-- Include unified points system -->
    <script src="js/gamePoints.js"></script>

    <script>
        // Viewport height fix
        function setVH() {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        }
        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', setVH);

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Game state
        let gameState = 'menu';
        let score = 0;
        let lives = 5;
        let kills = 0;
        let combo = 0;
        let maxCombo = 0;
        let highScore = localStorage.getItem('galaxyWar_highScore') || 0;

        // Camera
        let cameraX = 0;
        let cameraY = 0;
        let targetCameraX = 0;
        let targetCameraY = 0;
        let isDragging = false;
        let dragStartX = 0;
        let dragStartY = 0;
        let dragStartCameraX = 0;
        let dragStartCameraY = 0;

        // Game objects
        let stars = [];
        let enemies = [];
        let projectiles = [];
        let particles = [];
        let comboTimer = 0;

        // Constants
        const CROSSHAIR_SIZE = 60;
        const FIRE_COOLDOWN = 300;
        let lastFireTime = 0;

        // Enemy types with unique explosion effects - BIGGER SIZE for visibility
        const enemyTypes = [
            { name: 'fire', color: '#ff4400', speed: 1.5, health: 1, points: 100, size: 60, effect: 'fire' },
            { name: 'ice', color: '#00ddff', speed: 1.2, health: 2, points: 150, size: 65, effect: 'ice' },
            { name: 'poison', color: '#88ff00', speed: 1.8, health: 1, points: 120, size: 55, effect: 'poison' },
            { name: 'lightning', color: '#ffdd00', speed: 2.0, health: 1, points: 130, size: 58, effect: 'lightning' },
            { name: 'void', color: '#8800ff', speed: 1.0, health: 3, points: 200, size: 70, effect: 'blackhole' }
        ];

        // Set canvas size
        function resizeCanvas() {
            const container = document.getElementById('gameContainer');
            const stats = container.querySelector('.stats');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight - stats.offsetHeight;
        }

        // Initialize
        function init() {
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);

            // Show high score
            if (highScore > 0) {
                document.getElementById('highScore').classList.remove('hidden');
                document.getElementById('highScoreValue').textContent = parseInt(highScore).toLocaleString();
            }

            // Create stars (dim, realistic night sky) - MORE STARS
            for (let i = 0; i < 800; i++) {
                stars.push({
                    x: (Math.random() - 0.5) * 6000,
                    y: (Math.random() - 0.5) * 6000,
                    size: Math.random() * 2 + 0.3,
                    brightness: Math.random() * 0.5 + 0.2, // Slightly brighter
                    twinkleSpeed: Math.random() * 0.03 + 0.01,
                    twinklePhase: Math.random() * Math.PI * 2
                });
            }

            // Canvas events - dragging and click to fire
            canvas.addEventListener('mousedown', startDrag);
            canvas.addEventListener('mousemove', drag);
            canvas.addEventListener('mouseup', endDrag);
            canvas.addEventListener('click', fireProjectile);
            canvas.addEventListener('touchstart', (e) => {
                e.preventDefault();
                startDrag(e.touches[0]);
            });
            canvas.addEventListener('touchmove', (e) => {
                e.preventDefault();
                drag(e.touches[0]);
            });
            canvas.addEventListener('touchend', (e) => {
                e.preventDefault();
                endDrag();
                // Also fire on touch end if not dragging
                if (!isDragging) {
                    fireProjectile(e.changedTouches[0]);
                }
            });

            gameLoop();
        }

        window.startGame = function() {
            document.getElementById('menuScreen').classList.add('hidden');
            document.getElementById('gameoverScreen').classList.add('hidden');
            document.getElementById('gameContainer').classList.remove('hidden');

            gameState = 'playing';
            score = 0;
            lives = 5;
            kills = 0;
            combo = 0;
            maxCombo = 0;
            enemies = [];
            projectiles = [];
            particles = [];
            cameraX = 0;
            cameraY = 0;
            targetCameraX = 0;
            targetCameraY = 0;
            comboTimer = 0;

            updateUI();

            // Show hint
            const hint = document.createElement('div');
            hint.className = 'hint';
            hint.textContent = '드래그해서 화면을 이동하고 적을 조준하세요!';
            document.getElementById('gameContainer').appendChild(hint);
            setTimeout(() => hint.remove(), 3000);

            // Start spawning enemies
            spawnEnemies();
        };

        function spawnEnemies() {
            if (gameState !== 'playing') return;

            // Spawn enemy CLOSER to camera - more visible
            const angle = Math.random() * Math.PI * 2;
            const distance = 400 + Math.random() * 300; // Much closer!
            const x = cameraX + Math.cos(angle) * distance;
            const y = cameraY + Math.sin(angle) * distance;

            const type = enemyTypes[Math.floor(Math.random() * enemyTypes.length)];

            enemies.push({
                x, y,
                vx: 0,
                vy: 0,
                ...type,
                maxHealth: type.health,
                angle: Math.random() * Math.PI * 2,
                rotationSpeed: (Math.random() - 0.5) * 0.05
            });

            // Schedule next spawn
            const delay = Math.max(800, 2000 - kills * 50);
            setTimeout(spawnEnemies, delay);
        }

        function startDrag(e) {
            isDragging = true;
            const rect = canvas.getBoundingClientRect();
            dragStartX = (e.clientX || e.pageX) - rect.left;
            dragStartY = (e.clientY || e.pageY) - rect.top;
            dragStartCameraX = targetCameraX;
            dragStartCameraY = targetCameraY;
        }

        function drag(e) {
            if (!isDragging || gameState !== 'playing') return;

            const rect = canvas.getBoundingClientRect();
            const currentX = (e.clientX || e.pageX) - rect.left;
            const currentY = (e.clientY || e.pageY) - rect.top;

            const dx = currentX - dragStartX;
            const dy = currentY - dragStartY;

            targetCameraX = dragStartCameraX - dx;
            targetCameraY = dragStartCameraY - dy;
        }

        function endDrag() {
            isDragging = false;
        }

        // Fire projectile when clicking inside crosshair
        function fireProjectile(e) {
            if (gameState !== 'playing') return;
            if (Date.now() - lastFireTime < FIRE_COOLDOWN) return;
            if (isDragging) return; // Don't fire while dragging

            const rect = canvas.getBoundingClientRect();
            const clickX = (e.clientX || e.pageX) - rect.left;
            const clickY = (e.clientY || e.pageY) - rect.top;

            const scaleX = canvas.width / rect.width;
            const scaleY = canvas.height / rect.height;
            const canvasX = clickX * scaleX;
            const canvasY = clickY * scaleY;

            // Check if clicked inside crosshair
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const dist = Math.hypot(canvasX - centerX, canvasY - centerY);

            if (dist < CROSSHAIR_SIZE) {
                lastFireTime = Date.now();

                // Fire from center (crosshair position)
                projectiles.push({
                    x: cameraX,
                    y: cameraY,
                    vx: 0,
                    vy: 0,
                    speed: 15,
                    life: 60,
                    color: '#00ffff'
                });

                // Muzzle flash
                for (let i = 0; i < 10; i++) {
                    const angle = (Math.PI * 2 * i) / 10;
                    particles.push({
                        x: cameraX,
                        y: cameraY,
                        vx: Math.cos(angle) * 5,
                        vy: Math.sin(angle) * 5,
                        life: 20,
                        color: '#00ffff',
                        size: 4
                    });
                }
            }
        }

        function updateGame() {
            // Smooth camera movement
            cameraX += (targetCameraX - cameraX) * 0.1;
            cameraY += (targetCameraY - cameraY) * 0.1;

            // Update combo timer
            if (comboTimer > 0) {
                comboTimer--;
                if (comboTimer === 0) {
                    combo = 0;
                    updateUI();
                }
            }

            // Update enemies
            for (let i = enemies.length - 1; i >= 0; i--) {
                const enemy = enemies[i];
                enemy.angle += enemy.rotationSpeed;

                // Move towards escape (slowly drift away)
                const dx = enemy.x - cameraX;
                const dy = enemy.y - cameraY;
                const dist = Math.hypot(dx, dy);

                if (dist > 1500) {
                    // Enemy escaped
                    enemies.splice(i, 1);
                    lives--;
                    updateUI();
                    combo = 0;

                    if (lives <= 0) {
                        endGame();
                    }
                }
            }

            // Update projectiles
            for (let i = projectiles.length - 1; i >= 0; i--) {
                const proj = projectiles[i];

                // Find nearest enemy and move towards it
                let nearestEnemy = null;
                let nearestDist = Infinity;

                enemies.forEach(enemy => {
                    const dist = Math.hypot(enemy.x - proj.x, enemy.y - proj.y);
                    if (dist < nearestDist) {
                        nearestDist = dist;
                        nearestEnemy = enemy;
                    }
                });

                if (nearestEnemy && nearestDist < 500) {
                    const angle = Math.atan2(nearestEnemy.y - proj.y, nearestEnemy.x - proj.x);
                    proj.vx = Math.cos(angle) * proj.speed;
                    proj.vy = Math.sin(angle) * proj.speed;
                } else {
                    // Move in current direction or towards camera center
                    if (proj.vx === 0 && proj.vy === 0) {
                        proj.vy = -proj.speed;
                    }
                }

                proj.x += proj.vx;
                proj.y += proj.vy;
                proj.life--;

                if (proj.life <= 0) {
                    projectiles.splice(i, 1);
                    continue;
                }

                // Check collision with enemies
                for (let j = enemies.length - 1; j >= 0; j--) {
                    const enemy = enemies[j];
                    const dist = Math.hypot(enemy.x - proj.x, enemy.y - proj.y);

                    if (dist < enemy.size / 2) {
                        enemy.health--;

                        if (enemy.health <= 0) {
                            // Enemy destroyed
                            score += enemy.points;
                            kills++;
                            combo++;
                            maxCombo = Math.max(maxCombo, combo);
                            comboTimer = 120; // 2 seconds
                            updateUI();

                            // Create explosion based on enemy type
                            createExplosion(enemy);

                            enemies.splice(j, 1);
                        }

                        projectiles.splice(i, 1);
                        break;
                    }
                }
            }

            // Update particles
            for (let i = particles.length - 1; i >= 0; i--) {
                const p = particles[i];
                p.x += p.vx;
                p.y += p.vy;
                p.life--;

                if (p.effect === 'gravity') {
                    p.vy += 0.3;
                }

                if (p.effect === 'rotate') {
                    p.angle += p.rotationSpeed;
                }

                if (p.effect === 'expand') {
                    p.size += 0.5;
                }

                if (p.life <= 0) {
                    particles.splice(i, 1);
                }
            }
        }

        function createExplosion(enemy) {
            const particleCount = 30;

            switch (enemy.effect) {
                case 'fire': // Fire explosion with gravity
                    for (let i = 0; i < particleCount; i++) {
                        const angle = (Math.PI * 2 * i) / particleCount;
                        const speed = Math.random() * 8 + 4;
                        particles.push({
                            x: enemy.x,
                            y: enemy.y,
                            vx: Math.cos(angle) * speed,
                            vy: Math.sin(angle) * speed,
                            life: 40,
                            color: i % 2 === 0 ? '#ff4400' : '#ffaa00',
                            size: Math.random() * 8 + 4,
                            effect: 'gravity'
                        });
                    }
                    break;

                case 'ice': // Ice shards rotating
                    for (let i = 0; i < 20; i++) {
                        const angle = (Math.PI * 2 * i) / 20;
                        const speed = Math.random() * 6 + 3;
                        particles.push({
                            x: enemy.x,
                            y: enemy.y,
                            vx: Math.cos(angle) * speed,
                            vy: Math.sin(angle) * speed,
                            life: 50,
                            color: '#00ddff',
                            size: Math.random() * 6 + 3,
                            angle: angle,
                            rotationSpeed: (Math.random() - 0.5) * 0.3,
                            effect: 'rotate'
                        });
                    }
                    break;

                case 'poison': // Poison cloud expanding
                    for (let i = 0; i < 25; i++) {
                        const angle = Math.random() * Math.PI * 2;
                        const speed = Math.random() * 3 + 1;
                        particles.push({
                            x: enemy.x,
                            y: enemy.y,
                            vx: Math.cos(angle) * speed,
                            vy: Math.sin(angle) * speed,
                            life: 60,
                            color: '#88ff00',
                            size: Math.random() * 10 + 5,
                            effect: 'expand'
                        });
                    }
                    break;

                case 'lightning': // Electric discharge
                    for (let i = 0; i < 15; i++) {
                        const angle = (Math.PI * 2 * i) / 15;
                        const speed = Math.random() * 10 + 5;
                        particles.push({
                            x: enemy.x,
                            y: enemy.y,
                            vx: Math.cos(angle) * speed,
                            vy: Math.sin(angle) * speed,
                            life: 30,
                            color: '#ffdd00',
                            size: Math.random() * 4 + 2
                        });
                    }
                    break;

                case 'blackhole': // Void implosion then explosion
                    for (let i = 0; i < 40; i++) {
                        const angle = (Math.PI * 2 * i) / 40;
                        const speed = Math.random() * 10 + 5;
                        particles.push({
                            x: enemy.x,
                            y: enemy.y,
                            vx: Math.cos(angle) * speed,
                            vy: Math.sin(angle) * speed,
                            life: 50,
                            color: '#8800ff',
                            size: Math.random() * 6 + 3
                        });
                    }
                    break;
            }
        }

        function drawGame() {
            ctx.fillStyle = '#000000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw stars (very dim, realistic)
            stars.forEach(star => {
                const screenX = canvas.width / 2 + (star.x - cameraX);
                const screenY = canvas.height / 2 + (star.y - cameraY);

                // Only draw if on screen
                if (screenX > -10 && screenX < canvas.width + 10 &&
                    screenY > -10 && screenY < canvas.height + 10) {

                    // Subtle twinkling
                    star.twinklePhase += star.twinkleSpeed;
                    const twinkle = Math.sin(star.twinklePhase) * 0.1 + 0.9;
                    const alpha = star.brightness * twinkle;

                    ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
                    ctx.beginPath();
                    ctx.arc(screenX, screenY, star.size, 0, Math.PI * 2);
                    ctx.fill();
                }
            });

            // Draw enemies
            enemies.forEach(enemy => {
                const screenX = canvas.width / 2 + (enemy.x - cameraX);
                const screenY = canvas.height / 2 + (enemy.y - cameraY);

                // Only draw if near screen
                if (screenX > -200 && screenX < canvas.width + 200 &&
                    screenY > -200 && screenY < canvas.height + 200) {

                    ctx.save();
                    ctx.translate(screenX, screenY);
                    ctx.rotate(enemy.angle);

                    // Enemy ship
                    ctx.fillStyle = enemy.color;
                    ctx.shadowColor = enemy.color;
                    ctx.shadowBlur = 20;
                    ctx.beginPath();
                    ctx.moveTo(0, -enemy.size / 2);
                    ctx.lineTo(enemy.size / 3, enemy.size / 2);
                    ctx.lineTo(0, enemy.size / 3);
                    ctx.lineTo(-enemy.size / 3, enemy.size / 2);
                    ctx.closePath();
                    ctx.fill();
                    ctx.shadowBlur = 0;

                    // Health bar
                    if (enemy.health < enemy.maxHealth) {
                        ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
                        ctx.fillRect(-enemy.size / 2, -enemy.size / 2 - 10, enemy.size, 4);
                        ctx.fillStyle = '#00ff00';
                        ctx.fillRect(-enemy.size / 2, -enemy.size / 2 - 10,
                            enemy.size * (enemy.health / enemy.maxHealth), 4);
                    }

                    ctx.restore();
                }
            });

            // Draw projectiles
            projectiles.forEach(proj => {
                const screenX = canvas.width / 2 + (proj.x - cameraX);
                const screenY = canvas.height / 2 + (proj.y - cameraY);

                ctx.fillStyle = proj.color;
                ctx.shadowColor = proj.color;
                ctx.shadowBlur = 15;
                ctx.beginPath();
                ctx.arc(screenX, screenY, 5, 0, Math.PI * 2);
                ctx.fill();
                ctx.shadowBlur = 0;
            });

            // Draw particles
            particles.forEach(p => {
                const screenX = canvas.width / 2 + (p.x - cameraX);
                const screenY = canvas.height / 2 + (p.y - cameraY);

                const alpha = p.life / 60;
                ctx.fillStyle = p.color.includes('rgb')
                    ? p.color.replace(')', `, ${alpha})`).replace('rgb', 'rgba')
                    : p.color + Math.floor(alpha * 255).toString(16).padStart(2, '0');

                if (p.effect === 'rotate') {
                    ctx.save();
                    ctx.translate(screenX, screenY);
                    ctx.rotate(p.angle);
                    ctx.fillRect(-p.size / 2, -p.size / 2, p.size, p.size);
                    ctx.restore();
                } else {
                    ctx.beginPath();
                    ctx.arc(screenX, screenY, p.size, 0, Math.PI * 2);
                    ctx.fill();
                }
            });

            // Draw crescent moon (moves with camera, but slowly)
            const moonWorldX = cameraX * 0.1 + 2000; // Parallax effect
            const moonWorldY = cameraY * 0.1 - 1500;
            const moonScreenX = canvas.width / 2 + (moonWorldX - cameraX);
            const moonScreenY = canvas.height / 2 + (moonWorldY - cameraY);
            const moonRadius = 50;

            // Full moon
            ctx.fillStyle = 'rgba(255, 255, 200, 0.7)';
            ctx.shadowColor = 'rgba(255, 255, 200, 0.6)';
            ctx.shadowBlur = 40;
            ctx.beginPath();
            ctx.arc(moonScreenX, moonScreenY, moonRadius, 0, Math.PI * 2);
            ctx.fill();
            ctx.shadowBlur = 0;

            // Crescent shadow
            ctx.fillStyle = 'rgba(0, 0, 0, 0.85)';
            ctx.beginPath();
            ctx.arc(moonScreenX - 20, moonScreenY, moonRadius, 0, Math.PI * 2);
            ctx.fill();

            // Draw crosshair (center of screen)
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;

            ctx.strokeStyle = '#00ffff';
            ctx.lineWidth = 2;
            ctx.shadowColor = '#00ffff';
            ctx.shadowBlur = 10;

            // Outer circle
            ctx.beginPath();
            ctx.arc(centerX, centerY, CROSSHAIR_SIZE, 0, Math.PI * 2);
            ctx.stroke();

            // Inner crosshair lines
            ctx.beginPath();
            ctx.moveTo(centerX - 15, centerY);
            ctx.lineTo(centerX - 5, centerY);
            ctx.moveTo(centerX + 5, centerY);
            ctx.lineTo(centerX + 15, centerY);
            ctx.moveTo(centerX, centerY - 15);
            ctx.lineTo(centerX, centerY - 5);
            ctx.moveTo(centerX, centerY + 5);
            ctx.lineTo(centerX, centerY + 15);
            ctx.stroke();

            ctx.shadowBlur = 0;

            // Draw radar (bottom right)
            const radarX = canvas.width - 100;
            const radarY = canvas.height - 100;
            const radarRadius = 80;

            // Radar background
            ctx.fillStyle = 'rgba(0, 50, 100, 0.7)';
            ctx.beginPath();
            ctx.arc(radarX, radarY, radarRadius, 0, Math.PI * 2);
            ctx.fill();

            // Radar border
            ctx.strokeStyle = '#00ffff';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(radarX, radarY, radarRadius, 0, Math.PI * 2);
            ctx.stroke();

            // Radar grid
            ctx.strokeStyle = 'rgba(0, 255, 255, 0.3)';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(radarX - radarRadius, radarY);
            ctx.lineTo(radarX + radarRadius, radarY);
            ctx.moveTo(radarX, radarY - radarRadius);
            ctx.lineTo(radarX, radarY + radarRadius);
            ctx.stroke();

            // Range circles
            ctx.beginPath();
            ctx.arc(radarX, radarY, radarRadius * 0.33, 0, Math.PI * 2);
            ctx.arc(radarX, radarY, radarRadius * 0.66, 0, Math.PI * 2);
            ctx.stroke();

            // Player position (center dot)
            ctx.fillStyle = '#00ff00';
            ctx.beginPath();
            ctx.arc(radarX, radarY, 4, 0, Math.PI * 2);
            ctx.fill();

            // Enemy blips on radar
            enemies.forEach(enemy => {
                const dx = enemy.x - cameraX;
                const dy = enemy.y - cameraY;
                const dist = Math.hypot(dx, dy);
                const maxRadarDist = 1500;

                if (dist < maxRadarDist) {
                    const radarDist = (dist / maxRadarDist) * (radarRadius - 10);
                    const angle = Math.atan2(dy, dx);
                    const blipX = radarX + Math.cos(angle) * radarDist;
                    const blipY = radarY + Math.sin(angle) * radarDist;

                    ctx.fillStyle = enemy.color;
                    ctx.shadowColor = enemy.color;
                    ctx.shadowBlur = 5;
                    ctx.beginPath();
                    ctx.arc(blipX, blipY, 3, 0, Math.PI * 2);
                    ctx.fill();
                    ctx.shadowBlur = 0;
                }
            });

            // Radar label
            ctx.fillStyle = '#00ffff';
            ctx.font = 'bold 12px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('RADAR', radarX, radarY - radarRadius - 10);
        }

        function gameLoop() {
            if (gameState === 'playing') {
                updateGame();
                drawGame();
            }

            requestAnimationFrame(gameLoop);
        }

        function updateUI() {
            document.getElementById('score').textContent = score.toLocaleString();
            document.getElementById('combo').textContent = combo + 'x';
            document.getElementById('lives').textContent = lives;
        }

        function endGame() {
            gameState = 'gameover';

            document.getElementById('finalScore').textContent = score.toLocaleString();
            document.getElementById('killCount').textContent = kills;
            document.getElementById('maxComboDisplay').textContent = maxCombo;

            const isNewRecord = score > highScore;
            if (isNewRecord) {
                highScore = score;
                localStorage.setItem('galaxyWar_highScore', highScore);
                document.getElementById('newRecord').classList.remove('hidden');
            } else {
                document.getElementById('newRecord').classList.add('hidden');
            }

            // Add points to unified system
            if (typeof window.addGamePoints === 'function') {
                const accuracy = kills > 0 ? Math.min(100, Math.round((score / (kills * 100)) * 100)) : 0;
                const gameInfo = {
                    score: score,
                    accuracy: accuracy,
                    combo: maxCombo,
                    playTime: 120, // Estimated average playtime
                    isNewRecord: isNewRecord
                };
                
                try {
                    const pointsEarned = window.addGamePoints(score, 'galaxy_war', gameInfo);
                    console.log(`갤럭시 워: ${pointsEarned} 포인트 획득!`);
                } catch (e) {
                    console.log('Points system error:', e);
                }
            }

            if (highScore > 0 && !isNewRecord) {
                document.getElementById('highScoreDisplay').classList.remove('hidden');
                document.getElementById('highScoreDisplayValue').textContent = parseInt(highScore).toLocaleString();
            }

            document.getElementById('gameoverScreen').classList.remove('hidden');
        }

        // Initialize on load
        init();
    </script>
    <script>
        // Auto fullscreen on load
        function enterFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen().catch(err => console.log(err));
            } else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
        }
        
        // Try on first user interaction
        let hasTriedFullscreen = false;
        document.addEventListener("click", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });
        
        document.addEventListener("touchstart", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });
    </script>
</body>
</html>
