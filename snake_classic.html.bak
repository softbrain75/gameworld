<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="manifest" href="manifest.json">
    <title>스네이크 클래식 - 게임세상</title>
    <style>
        :root {
            --vh: 1vh;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Malgun Gothic', sans-serif;
            background: linear-gradient(135deg, #1e5a1e 0%, #2d8b2d 100%);
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .menu-screen, .gameover-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(135deg, #1e5a1e 0%, #2d8b2d 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .menu-content, .gameover-content {
            background: rgba(0, 0, 0, 0.9);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            color: white;
            max-width: 90%;
            width: 400px;
            border: 3px solid #4CAF50;
            box-shadow: 0 0 40px rgba(76, 175, 80, 0.5);
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-icon {
            font-size: 4em;
            margin-bottom: 20px;
            animation: wiggle 1s ease-in-out infinite;
        }

        @keyframes wiggle {
            0%, 100% { transform: rotate(-3deg); }
            50% { transform: rotate(3deg); }
        }

        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: left;
            font-size: 0.9em;
        }

        .instructions p {
            margin: 8px 0;
            line-height: 1.5;
        }

        .btn {
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.5em;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            box-shadow: 0 0 30px rgba(76, 175, 80, 0.5);
            transition: transform 0.2s;
            font-weight: bold;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .btn:active {
            transform: scale(0.95);
        }

        .back-btn {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            z-index: 100;
            font-size: 0.9em;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        #gameCanvas {
            display: block;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: #1a1a1a;
            touch-action: none;
        }

        .hidden {
            display: none;
        }

        .high-score {
            background: rgba(76, 175, 80, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border: 2px solid rgba(76, 175, 80, 0.5);
        }

        .score-display {
            font-size: 3em;
            margin: 20px 0;
            color: #4CAF50;
            text-shadow: 0 0 20px #4CAF50;
        }

        .controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: grid;
            grid-template-columns: repeat(3, 70px);
            grid-template-rows: repeat(3, 70px);
            gap: 10px;
            z-index: 10;
        }

        .control-btn {
            background: rgba(76, 175, 80, 0.7);
            border: 2px solid #4CAF50;
            border-radius: 15px;
            color: white;
            font-size: 2em;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .control-btn:active {
            background: rgba(76, 175, 80, 1);
            transform: scale(0.95);
        }

        .control-btn.up { grid-column: 2; grid-row: 1; }
        .control-btn.left { grid-column: 1; grid-row: 2; }
        .control-btn.right { grid-column: 3; grid-row: 2; }
        .control-btn.down { grid-column: 2; grid-row: 3; }
    </style>
</head>
<body>
    <a href="index.html" class="back-btn">← 홈으로</a>

    <!-- Menu Screen -->
    <div id="menuScreen" class="menu-screen">
        <div class="menu-content">
            <div class="game-icon">🐍</div>
            <h1>스네이크 클래식</h1>
            <p style="color: #4CAF50; margin-bottom: 20px;">클래식 뱀 게임!</p>

            <div id="highScore" class="high-score hidden">
                <div style="opacity: 0.8;">🏆 최고 점수</div>
                <div style="font-size: 2em; font-weight: bold; color: #4CAF50;" id="highScoreValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🐍 시작</button>

            <div class="instructions">
                <p style="font-weight: bold; color: #4CAF50; margin-bottom: 10px;">🎮 게임 방법</p>
                <p>🍎 먹이를 먹고 뱀을 길게 만드세요!</p>
                <p>⬆️⬇️⬅️➡️ 방향키 또는 화면 버튼으로 조작</p>
                <p>💥 벽이나 자기 몸에 부딪히면 게임 오버!</p>
                <p>🎯 먹이를 먹을수록 뱀이 길어집니다!</p>
                <p>⚡ 속도가 점점 빨라집니다!</p>
            </div>
        </div>
    </div>

    <!-- Game Over Screen -->
    <div id="gameoverScreen" class="gameover-screen hidden">
        <div class="gameover-content">
            <div class="game-icon">🐍</div>
            <h1 id="gameoverTitle">게임 오버!</h1>

            <div class="score-display" id="finalScore">0</div>
            <div style="opacity: 0.8; margin-bottom: 20px;">최종 길이</div>

            <div id="newRecord" class="hidden" style="color: #4CAF50; font-size: 1.2em; margin: 10px 0;">
                🎉 신기록! 🎉
            </div>

            <div id="highScoreDisplay" class="high-score hidden">
                <div style="opacity: 0.8;">역대 최고 길이</div>
                <div style="font-size: 1.5em; font-weight: bold; color: #4CAF50;" id="highScoreDisplayValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🔄 다시하기</button>
        </div>
    </div>

    <!-- Game Screen -->
    <canvas id="gameCanvas" class="hidden"></canvas>

    <!-- Mobile Controls -->
    <div id="controls" class="controls hidden">
        <button class="control-btn up" onclick="changeDirection('up')">⬆️</button>
        <button class="control-btn left" onclick="changeDirection('left')">⬅️</button>
        <button class="control-btn right" onclick="changeDirection('right')">➡️</button>
        <button class="control-btn down" onclick="changeDirection('down')">⬇️</button>
    </div>

    <script>
        // Viewport height fix
        function setVH() {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        }
        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', setVH);

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Game state
        let gameState = 'menu';
        let snake = [];
        let food = {};
        let direction = 'right';
        let nextDirection = 'right';
        let score = 0;
        let gridSize = 20;
        let gameSpeed = 150;
        let lastUpdate = 0;
        let bestScore = localStorage.getItem('snake_best') || 0;

        // Sound effects - short and quiet (40% of BGM volume)
        let audioContext = null;

        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            if (audioContext.state === 'suspended') {
                audioContext.resume();
            }
        }

        function playSound(soundType) {
            try {
                initAudio();

                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();

                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);

                switch(soundType) {
                    case 'eat':
                        oscillator.frequency.value = 600;
                        gainNode.gain.value = 0.10;
                        oscillator.type = 'sine';
                        break;

                    case 'gameover':
                        oscillator.frequency.value = 150;
                        gainNode.gain.value = 0.12;
                        oscillator.type = 'sine';
                        break;
                }

                oscillator.start();
                oscillator.stop(audioContext.currentTime + 0.1);
            } catch (e) {}
        }

        // Initialize snake
        function initSnake() {
            snake = [
                {x: 10, y: 10},
                {x: 9, y: 10},
                {x: 8, y: 10}
            ];
            direction = 'right';
            nextDirection = 'right';
            score = 3;
            gameSpeed = 150;
            spawnFood();
        }

        // Spawn food
        function spawnFood() {
            const cols = Math.floor(canvas.width / gridSize);
            const rows = Math.floor(canvas.height / gridSize) - 5; // Leave space for score

            do {
                food = {
                    x: Math.floor(Math.random() * cols),
                    y: Math.floor(Math.random() * rows)
                };
            } while (snake.some(seg => seg.x === food.x && seg.y === food.y));
        }

        // Change direction
        window.changeDirection = function(newDir) {
            if (gameState !== 'playing') return;

            const opposites = {
                'up': 'down',
                'down': 'up',
                'left': 'right',
                'right': 'left'
            };

            if (newDir !== opposites[direction]) {
                nextDirection = newDir;
            }
        };

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            const keyMap = {
                'ArrowUp': 'up',
                'ArrowDown': 'down',
                'ArrowLeft': 'left',
                'ArrowRight': 'right'
            };

            if (keyMap[e.key]) {
                e.preventDefault();
                changeDirection(keyMap[e.key]);
            }
        });

        // Update game
        function update() {
            direction = nextDirection;

            const head = {...snake[0]};

            switch(direction) {
                case 'up': head.y--; break;
                case 'down': head.y++; break;
                case 'left': head.x--; break;
                case 'right': head.x++; break;
            }

            // Check wall collision
            const cols = Math.floor(canvas.width / gridSize);
            const rows = Math.floor(canvas.height / gridSize) - 5;

            if (head.x < 0 || head.x >= cols || head.y < 0 || head.y >= rows) {
                endGame();
                return;
            }

            // Check self collision
            if (snake.some(seg => seg.x === head.x && seg.y === head.y)) {
                endGame();
                return;
            }

            snake.unshift(head);

            // Check food collision
            if (head.x === food.x && head.y === food.y) {
                score++;
                playSound('eat');
                spawnFood();
                gameSpeed = Math.max(50, gameSpeed - 2); // Speed up
            } else {
                snake.pop();
            }
        }

        // Draw game
        function draw() {
            ctx.fillStyle = '#1a1a1a';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
            ctx.lineWidth = 1;
            for (let i = 0; i < canvas.width; i += gridSize) {
                ctx.beginPath();
                ctx.moveTo(i, 0);
                ctx.lineTo(i, canvas.height);
                ctx.stroke();
            }
            for (let i = 0; i < canvas.height; i += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, i);
                ctx.lineTo(canvas.width, i);
                ctx.stroke();
            }

            // Draw snake
            snake.forEach((seg, i) => {
                const gradient = ctx.createLinearGradient(
                    seg.x * gridSize, seg.y * gridSize,
                    (seg.x + 1) * gridSize, (seg.y + 1) * gridSize
                );
                if (i === 0) {
                    gradient.addColorStop(0, '#8BC34A');
                    gradient.addColorStop(1, '#4CAF50');
                } else {
                    gradient.addColorStop(0, '#4CAF50');
                    gradient.addColorStop(1, '#2d8b2d');
                }

                ctx.fillStyle = gradient;
                ctx.fillRect(seg.x * gridSize + 1, seg.y * gridSize + 1, gridSize - 2, gridSize - 2);

                // Head details
                if (i === 0) {
                    ctx.fillStyle = 'white';
                    ctx.beginPath();
                    ctx.arc(seg.x * gridSize + 8, seg.y * gridSize + 7, 2, 0, Math.PI * 2);
                    ctx.arc(seg.x * gridSize + 13, seg.y * gridSize + 7, 2, 0, Math.PI * 2);
                    ctx.fill();
                }
            });

            // Draw food
            ctx.fillStyle = '#FF5252';
            ctx.shadowBlur = 15;
            ctx.shadowColor = '#FF5252';
            ctx.beginPath();
            ctx.arc(
                food.x * gridSize + gridSize / 2,
                food.y * gridSize + gridSize / 2,
                gridSize / 2 - 2,
                0,
                Math.PI * 2
            );
            ctx.fill();
            ctx.shadowBlur = 0;

            // Draw score
            ctx.fillStyle = 'white';
            ctx.font = 'bold 30px Arial';
            ctx.textAlign = 'left';
            ctx.fillText(`길이: ${score}`, 20, canvas.height - 20);
        }

        // Game loop
        function gameLoop(currentTime) {
            if (gameState !== 'playing') return;

            if (currentTime - lastUpdate > gameSpeed) {
                update();
                lastUpdate = currentTime;
            }

            draw();
            requestAnimationFrame(gameLoop);
        }

        // Start game
        window.startGame = function() {
            document.getElementById('menuScreen').classList.add('hidden');
            document.getElementById('gameoverScreen').classList.add('hidden');
            canvas.classList.remove('hidden');
            document.getElementById('controls').classList.remove('hidden');

            gameState = 'playing';
            initSnake();
            lastUpdate = performance.now();
            requestAnimationFrame(gameLoop);
        };

        // End game
        function endGame() {
            gameState = 'gameover';
            playSound('gameover');

            document.getElementById('finalScore').textContent = score;

            let title = '게임 오버!';
            if (score >= 50) {
                title = '놀라워요! 🐍🐍🐍';
            } else if (score >= 30) {
                title = '훌륭해요! 🐍🐍';
            } else if (score >= 20) {
                title = '좋아요! 🐍';
            }
            document.getElementById('gameoverTitle').textContent = title;

            const isNewRecord = score > bestScore;
            if (isNewRecord) {
                bestScore = score;
                localStorage.setItem('snake_best', bestScore);
                document.getElementById('newRecord').classList.remove('hidden');
            } else {
                document.getElementById('newRecord').classList.add('hidden');
            }

            if (bestScore > 0 && !isNewRecord) {
                document.getElementById('highScoreDisplay').classList.remove('hidden');
                document.getElementById('highScoreDisplayValue').textContent = bestScore;
            } else {
                document.getElementById('highScoreDisplay').classList.add('hidden');
            }

            canvas.classList.add('hidden');
            document.getElementById('controls').classList.add('hidden');
            document.getElementById('gameoverScreen').classList.remove('hidden');
        }

        // Initialize
        if (bestScore > 0) {
            document.getElementById('highScore').classList.remove('hidden');
            document.getElementById('highScoreValue').textContent = bestScore;
        }
    </script>
    <script>
        // Auto fullscreen on load
        function enterFullscreen() {
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen().catch(err => console.log(err));
            } else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
        }

        // Try on first user interaction
        let hasTriedFullscreen = false;
        document.addEventListener("click", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });

        document.addEventListener("touchstart", () => {
            if (!hasTriedFullscreen) {
                hasTriedFullscreen = true;
                enterFullscreen();
            }
        }, { once: true });
    </script>
</body>
</html>
