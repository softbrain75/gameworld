<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-fullscreen">
    <meta name="mobile-web-app-capable" content="yes">
    <title>파이터 배틀 - 2인 격투 게임</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }
        body {
            overflow: hidden;
            touch-action: none;
            font-family: 'Malgun Gothic', sans-serif;
            background: #000;
        }
        #gameCanvas {
            display: block;
            background: linear-gradient(180deg, #4a5568 0%, #2d3748 100%);
            touch-action: none;
        }
        .screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: white;
            padding: 20px;
            background: rgba(0,0,0,0.9);
            border-radius: 20px;
            max-width: 90%;
            width: 600px;
            z-index: 10;
        }
        h1 {
            font-size: 48px;
            margin-bottom: 20px;
            color: #ffd700;
            text-shadow: 3px 3px 6px rgba(0,0,0,0.5);
        }
        .instructions {
            font-size: 18px;
            line-height: 1.8;
            margin: 20px 0;
            text-align: left;
        }
        .controls {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
            text-align: left;
        }
        .player-controls {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
        }
        .player-controls h3 {
            margin-bottom: 10px;
            color: #ffd700;
        }
        .button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 24px;
            border-radius: 10px;
            cursor: pointer;
            margin: 10px;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            transition: transform 0.1s;
        }
        .button:active {
            transform: scale(0.95);
        }
        .highscore {
            font-size: 20px;
            margin: 15px 0;
            color: #ffd700;
        }
        #gameInfo {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 30px;
            z-index: 5;
        }
        .player-hud {
            background: rgba(0,0,0,0.7);
            padding: 15px 25px;
            border-radius: 10px;
            min-width: 200px;
        }
        .player-hud h2 {
            font-size: 24px;
            margin-bottom: 10px;
        }
        .health-bar {
            width: 200px;
            height: 30px;
            background: #333;
            border-radius: 15px;
            overflow: hidden;
            border: 3px solid #666;
            position: relative;
        }
        .health-fill {
            height: 100%;
            background: linear-gradient(90deg, #4ade80 0%, #22c55e 100%);
            transition: width 0.3s;
            border-radius: 12px;
        }
        .health-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-weight: bold;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
            font-size: 12px;
        }
        #timer {
            position: absolute;
            top: 100px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 48px;
            color: white;
            background: rgba(0,0,0,0.7);
            padding: 10px 30px;
            border-radius: 10px;
            z-index: 5;
        }
        .mobile-controls {
            display: none;
            position: absolute;
            bottom: 20px;
            width: 100%;
            justify-content: space-between;
            padding: 0 20px;
            z-index: 5;
        }
        .control-group {
            display: flex;
            gap: 10px;
        }
        .mobile-btn {
            width: 60px;
            height: 60px;
            background: rgba(255,255,255,0.3);
            border: 2px solid white;
            border-radius: 50%;
            color: white;
            font-size: 20px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            user-select: none;
        }
        .mobile-btn:active {
            background: rgba(255,255,255,0.5);
        }
        @media (max-width: 768px) {
            .mobile-controls {
                display: flex;
            }
        }
        .mode-btn {
            padding: 10px 20px;
            background: rgba(255,255,255,0.2);
            color: white;
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.2s;
        }
        .mode-btn.selected {
            background: rgba(102,126,234,0.8);
            border-color: #667eea;
        }
        .mode-btn:hover {
            background: rgba(255,255,255,0.3);
        }
        .difficulty-btn.selected {
            background: rgba(102,126,234,0.8) !important;
            border-color: #667eea !important;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="menuScreen" class="screen">
        <h1>⚔️ 파이터 배틀</h1>
        <div class="instructions">
            <strong>게임 방법:</strong><br>
            • 검과 방패로 싸우는 전략 격투 게임!<br>
            • <strong>서서 공격:</strong> 투구 공격 (2번 맞으면 사망)<br>
            • <strong>앉아 공격:</strong> 갑옷 공격 (2번 맞으면 사망)<br>
            • <strong>점프:</strong> 앉아 공격 회피!<br>
            • <strong>방어:</strong> 공격 차단, 성공 시 1초 쿨타임<br>
            • 투구와 갑옷 모두 파괴되면 패배!<br><br>
        </div>
        <div class="mode-selector" style="display: flex; gap: 10px; justify-content: center; margin: 20px 0;">
            <button class="mode-btn selected" id="pvpBtn">👥 2인 대전</button>
            <button class="mode-btn" id="aiBtn">🤖 AI 대전</button>
        </div>
        <div id="aiDifficulty" style="display: none; margin: 15px 0;">
            <label style="color: white; font-size: 1.1em; display: block; margin-bottom: 10px;">AI 난이도:</label>
            <div style="display: flex; gap: 10px; justify-content: center;">
                <button class="difficulty-btn selected" id="easyAI" style="padding: 10px 20px; background: rgba(255,255,255,0.2); color: white; border: 2px solid white; border-radius: 8px; cursor: pointer;">😊 초급</button>
                <button class="difficulty-btn" id="mediumAI" style="padding: 10px 20px; background: rgba(255,255,255,0.2); color: white; border: 2px solid white; border-radius: 8px; cursor: pointer;">🤔 중급</button>
                <button class="difficulty-btn" id="hardAI" style="padding: 10px 20px; background: rgba(255,255,255,0.2); color: white; border: 2px solid white; border-radius: 8px; cursor: pointer;">😈 상급</button>
            </div>
        </div>
        <div class="controls">
            <div class="player-controls">
                <h3>🔴 플레이어 1 (빨강)</h3>
                • W - 점프 / S - 앉기<br>
                • A, D - 좌우 이동<br>
                • F - 공격<br>
                • Shift - 방어
            </div>
            <div class="player-controls" id="p2Controls">
                <h3>🔵 플레이어 2 (파랑)</h3>
                • ↑ - 점프 / ↓ - 앉기<br>
                • ←, → - 좌우 이동<br>
                • Enter - 공격<br>
                • \ - 방어
            </div>
        </div>
        <div class="highscore">최다 승리: <span id="menuHighScore">P1: 0 / P2: 0</span></div>
        <button class="button" onclick="startGame()">게임 시작</button>
    </div>
    <div id="gameoverScreen" class="screen" style="display:none;">
        <h1>🏆 게임 종료!</h1>
        <div style="font-size: 32px; margin: 30px 0;">
            <div id="winner"></div>
        </div>
        <div class="highscore">승수: <span id="gameoverScore">P1: 0 / P2: 0</span></div>
        <button class="button" onclick="startGame()">다시 하기</button>
        <button class="button" onclick="showMenu()">메뉴로</button>
    </div>
    <div id="gameInfo" style="display:none;">
        <div class="player-hud" style="color: #ff4444;">
            <h2>🔴 플레이어 1</h2>
            <div class="health-bar">
                <div class="health-fill" id="p1Health" style="width: 100%;"></div>
                <div class="health-text" id="p1HealthText">100</div>
            </div>
        </div>
        <div class="player-hud" style="color: #4444ff;">
            <h2>🔵 플레이어 2</h2>
            <div class="health-bar">
                <div class="health-fill" id="p2Health" style="width: 100%;"></div>
                <div class="health-text" id="p2HealthText">100</div>
            </div>
        </div>
    </div>
    <div id="timer" style="display:none;">60</div>

    <!-- Mobile Controls -->
    <div class="mobile-controls">
        <div class="control-group">
            <div class="mobile-btn" id="p1Left">←</div>
            <div class="mobile-btn" id="p1Right">→</div>
            <div class="mobile-btn" id="p1Attack">⚔️</div>
            <div class="mobile-btn" id="p1Defend">🛡️</div>
        </div>
        <div class="control-group">
            <div class="mobile-btn" id="p2Left">←</div>
            <div class="mobile-btn" id="p2Right">→</div>
            <div class="mobile-btn" id="p2Attack">⚔️</div>
            <div class="mobile-btn" id="p2Defend">🛡️</div>
        </div>
    </div>

    <script>
        // Viewport height fix
        let vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
        window.addEventListener('resize', () => {
            vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        });

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let gameState = 'menu';
        let gameMode = 'pvp'; // 'pvp' or 'ai'
        let aiDifficulty = 'easy'; // 'easy', 'medium', 'hard'

        // Sprite loading
        const sprites = {
            idle: [],
            walk: [],
            run: [],
            jump: [],
            attack: [],
            jumpattack: [],
            dead: [],
            slash: [] // Slash effect
        };
        let spritesLoaded = 0;
        const totalSprites = 76; // 7 animations × 10 frames + 6 slash frames

        function loadSprites() {
            const animations = [
                { name: 'Idle', key: 'idle' },
                { name: 'Walk', key: 'walk' },
                { name: 'Run', key: 'run' },
                { name: 'Jump', key: 'jump' },
                { name: 'Attack', key: 'attack' },
                { name: 'JumpAttack', key: 'jumpattack' },
                { name: 'Dead', key: 'dead' }
            ];

            animations.forEach(anim => {
                for (let i = 1; i <= 10; i++) {
                    const img = new Image();
                    img.onload = () => {
                        spritesLoaded++;
                        if (spritesLoaded === totalSprites) {
                            console.log('All sprites loaded!');
                        }
                    };
                    img.onerror = () => {
                        console.error(`Failed to load: ${anim.name} (${i})`);
                    };
                    img.src = `resources/knight/${anim.name} (${i}).png`;
                    sprites[anim.key].push(img);
                }
            });

            // Load slash effect
            for (let i = 1; i <= 6; i++) {
                const img = new Image();
                img.onload = () => {
                    spritesLoaded++;
                    if (spritesLoaded === totalSprites) {
                        console.log('All sprites loaded!');
                    }
                };
                img.onerror = () => {
                    console.error(`Failed to load slash effect (${i})`);
                };
                img.src = `resources/slash/Classic_0${i}.png`;
                sprites.slash.push(img);
            }
        }

        loadSprites();

        // Audio
        let audioContext = null;

        function initAudio() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            if (audioContext.state === 'suspended') {
                audioContext.resume();
            }
        }

        function playSound(soundType) {
            try {
                initAudio();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);

                switch(soundType) {
                    case 'hit':
                        oscillator.frequency.value = 200;
                        gainNode.gain.value = 0.10;
                        oscillator.type = 'square';
                        break;
                    case 'defend':
                        oscillator.frequency.value = 600;
                        gainNode.gain.value = 0.08;
                        oscillator.type = 'sine';
                        break;
                    case 'win':
                        oscillator.frequency.value = 800;
                        gainNode.gain.value = 0.12;
                        oscillator.type = 'sine';
                        break;
                }

                oscillator.start();
                oscillator.stop(audioContext.currentTime + 0.1);
            } catch (e) {}
        }

        // Players
        const player1 = {
            x: 200,
            y: canvas.height - 200,
            width: 50,
            height: 100,
            standingHeight: 100,
            crouchingHeight: 60,
            color: '#ff4444',
            helmetHP: 100, // 투구 HP
            armorHP: 100,  // 갑옷 HP
            maxHelmetHP: 100,
            maxArmorHP: 100,
            velocityX: 0,
            velocityY: 0,
            speed: 5,
            jumpPower: 15,
            gravity: 0.8,
            isJumping: false,
            isCrouching: false,
            isAttacking: false,
            isDefending: false,
            attackCooldown: 0,
            defendCooldown: 0,
            knockbackX: 0,
            walkFrame: 0,
            facing: 1, // 1 = right, -1 = left
            keys: {},
            // Sprite animation
            currentAnimation: 'idle',
            animationFrame: 0,
            animationSpeed: 0.15,
            // Slash effect
            slashFrame: 0,
            slashActive: false,
            // HP regeneration
            lastHitTime: 0
        };

        const player2 = {
            x: canvas.width - 260,
            y: canvas.height - 200,
            width: 50,
            height: 100,
            standingHeight: 100,
            crouchingHeight: 60,
            color: '#4444ff',
            helmetHP: 100,
            armorHP: 100,
            maxHelmetHP: 100,
            maxArmorHP: 100,
            velocityX: 0,
            velocityY: 0,
            speed: 5,
            jumpPower: 15,
            gravity: 0.8,
            isJumping: false,
            isCrouching: false,
            isAttacking: false,
            isDefending: false,
            attackCooldown: 0,
            defendCooldown: 0,
            knockbackX: 0,
            walkFrame: 0,
            facing: -1,
            keys: {},
            // Sprite animation
            currentAnimation: 'idle',
            animationFrame: 0,
            animationSpeed: 0.15,
            // Slash effect
            slashFrame: 0,
            slashActive: false,
            // HP regeneration
            lastHitTime: 0
        };

        let wins = { p1: 0, p2: 0 };

        // Load wins from localStorage
        const savedWins = localStorage.getItem('fighterBattle_wins');
        if (savedWins) {
            wins = JSON.parse(savedWins);
            updateWinsDisplay();
        }

        function updateWinsDisplay() {
            document.getElementById('menuHighScore').textContent = `P1: ${wins.p1} / P2: ${wins.p2}`;
            document.getElementById('gameoverScore').textContent = `P1: ${wins.p1} / P2: ${wins.p2}`;
        }

        // Mode selection
        document.getElementById('pvpBtn').addEventListener('click', () => {
            gameMode = 'pvp';
            document.getElementById('pvpBtn').classList.add('selected');
            document.getElementById('aiBtn').classList.remove('selected');
            document.getElementById('aiDifficulty').style.display = 'none';
            document.getElementById('p2Controls').style.display = 'block';
        });

        document.getElementById('aiBtn').addEventListener('click', () => {
            gameMode = 'ai';
            document.getElementById('aiBtn').classList.add('selected');
            document.getElementById('pvpBtn').classList.remove('selected');
            document.getElementById('aiDifficulty').style.display = 'block';
            document.getElementById('p2Controls').style.display = 'none';
        });

        // Difficulty selection
        document.getElementById('easyAI').addEventListener('click', () => {
            aiDifficulty = 'easy';
            document.querySelectorAll('.difficulty-btn').forEach(btn => btn.classList.remove('selected'));
            document.getElementById('easyAI').classList.add('selected');
        });

        document.getElementById('mediumAI').addEventListener('click', () => {
            aiDifficulty = 'medium';
            document.querySelectorAll('.difficulty-btn').forEach(btn => btn.classList.remove('selected'));
            document.getElementById('mediumAI').classList.add('selected');
        });

        document.getElementById('hardAI').addEventListener('click', () => {
            aiDifficulty = 'hard';
            document.querySelectorAll('.difficulty-btn').forEach(btn => btn.classList.remove('selected'));
            document.getElementById('hardAI').classList.add('selected');
        });

        function startGame() {
            gameState = 'playing';

            player1.x = 200;
            player1.y = canvas.height - 200;
            player1.helmetHP = 100;
            player1.armorHP = 100;
            player1.velocityX = 0;
            player1.velocityY = 0;
            player1.isJumping = false;
            player1.isCrouching = false;
            player1.isAttacking = false;
            player1.isDefending = false;
            player1.attackCooldown = 0;
            player1.defendCooldown = 0;
            player1.knockbackX = 0;
            player1.walkFrame = 0;
            player1.height = player1.standingHeight;
            player1.facing = 1;
            player1.slashActive = false;
            player1.lastHitTime = 0;

            player2.x = canvas.width - 260;
            player2.y = canvas.height - 200;
            player2.helmetHP = 100;
            player2.armorHP = 100;
            player2.velocityX = 0;
            player2.velocityY = 0;
            player2.isJumping = false;
            player2.isCrouching = false;
            player2.isAttacking = false;
            player2.isDefending = false;
            player2.attackCooldown = 0;
            player2.defendCooldown = 0;
            player2.knockbackX = 0;
            player2.walkFrame = 0;
            player2.height = player2.standingHeight;
            player2.facing = -1;
            player2.slashActive = false;
            player2.lastHitTime = 0;

            document.getElementById('menuScreen').style.display = 'none';
            document.getElementById('gameoverScreen').style.display = 'none';
            document.getElementById('gameInfo').style.display = 'flex';
            document.getElementById('timer').style.display = 'none';

            updateArmorDisplay();
        }

        function showMenu() {
            gameState = 'menu';
            document.getElementById('menuScreen').style.display = 'block';
            document.getElementById('gameoverScreen').style.display = 'none';
            document.getElementById('gameInfo').style.display = 'none';
            document.getElementById('timer').style.display = 'none';
        }

        function gameOver() {
            gameState = 'gameover';

            let winner;
            const p1Dead = player1.helmetHP <= 0 || player1.armorHP <= 0;
            const p2Dead = player2.helmetHP <= 0 || player2.armorHP <= 0;

            if (p1Dead && p2Dead) {
                winner = '무승부!';
            } else if (p1Dead) {
                winner = gameMode === 'ai' ? '🤖 AI 승리!' : '🔵 플레이어 2 승리!';
                wins.p2++;
            } else if (p2Dead) {
                winner = '🔴 플레이어 1 승리!';
                wins.p1++;
            } else {
                winner = '무승부!';
            }

            localStorage.setItem('fighterBattle_wins', JSON.stringify(wins));
            updateWinsDisplay();

            document.getElementById('winner').textContent = winner;
            document.getElementById('gameoverScreen').style.display = 'block';
            document.getElementById('gameInfo').style.display = 'none';
            document.getElementById('timer').style.display = 'none';

            playSound('win');
        }

        // Particle effects for armor breaking
        let particles = [];

        function createBreakEffect(x, y, color, type) {
            for (let i = 0; i < 15; i++) {
                particles.push({
                    x: x,
                    y: y,
                    vx: (Math.random() - 0.5) * 8,
                    vy: (Math.random() - 0.5) * 8 - 2,
                    life: 60,
                    maxLife: 60,
                    color: color,
                    size: Math.random() * 4 + 2,
                    type: type
                });
            }
        }

        function updateParticles() {
            for (let i = particles.length - 1; i >= 0; i--) {
                const p = particles[i];
                p.x += p.vx;
                p.y += p.vy;
                p.vy += 0.3; // gravity
                p.life--;
                if (p.life <= 0) {
                    particles.splice(i, 1);
                }
            }
        }

        function drawParticles() {
            particles.forEach(p => {
                const alpha = p.life / p.maxLife;
                ctx.fillStyle = p.color.replace('rgb', 'rgba').replace(')', `,${alpha})`);
                ctx.fillRect(p.x, p.y, p.size, p.size);
            });
        }

        function updateArmorDisplay() {
            // Player 1
            const p1Total = player1.helmetHP + player1.armorHP;
            const p1Percent = Math.max(0, (p1Total / 200) * 100);
            document.getElementById('p1Health').style.width = p1Percent + '%';
            document.getElementById('p1HealthText').textContent = `투구:${Math.round(player1.helmetHP)} 갑옷:${Math.round(player1.armorHP)}`;

            // Player 2
            const p2Total = player2.helmetHP + player2.armorHP;
            const p2Percent = Math.max(0, (p2Total / 200) * 100);
            document.getElementById('p2Health').style.width = p2Percent + '%';
            document.getElementById('p2HealthText').textContent = `투구:${Math.round(player2.helmetHP)} 갑옷:${Math.round(player2.armorHP)}`;

            // Check death condition: helmet 0 OR armor 0
            if (player1.helmetHP <= 0 || player1.armorHP <= 0) {
                gameOver();
            }
            if (player2.helmetHP <= 0 || player2.armorHP <= 0) {
                gameOver();
            }
        }

        // Keyboard controls
        window.addEventListener('keydown', (e) => {
            if (gameState !== 'playing') return;

            // Player 1 controls
            if (e.key === 'w' || e.key === 'W') {
                if (!player1.isJumping && !player1.isCrouching) {
                    player1.velocityY = -player1.jumpPower;
                    player1.isJumping = true;
                }
            }
            if (e.key === 's' || e.key === 'S') {
                if (!player1.isJumping) {
                    player1.isCrouching = true;
                    player1.keys.crouch = true;
                }
            }
            if (e.key === 'a' || e.key === 'A') player1.keys.left = true;
            if (e.key === 'd' || e.key === 'D') player1.keys.right = true;
            if (e.key === 'f' || e.key === 'F') {
                e.preventDefault();
                if (player1.attackCooldown <= 0 && !player1.isDefending) {
                    player1.isAttacking = true;
                    player1.attackCooldown = 30; // 공격 속도 2배 빠르게
                }
            }
            if (e.key === 'Shift' && e.location === 1) { // Left Shift
                e.preventDefault();
                if (player1.defendCooldown <= 0) {
                    player1.isDefending = true;
                }
            }

            // Player 2 controls
            if (e.key === 'ArrowUp') {
                e.preventDefault();
                if (!player2.isJumping && !player2.isCrouching) {
                    player2.velocityY = -player2.jumpPower;
                    player2.isJumping = true;
                }
            }
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                if (!player2.isJumping) {
                    player2.isCrouching = true;
                    player2.keys.crouch = true;
                }
            }
            if (e.key === 'ArrowLeft') player2.keys.left = true;
            if (e.key === 'ArrowRight') player2.keys.right = true;
            if (e.key === 'Enter') {
                e.preventDefault();
                if (player2.attackCooldown <= 0 && !player2.isDefending) {
                    player2.isAttacking = true;
                    player2.attackCooldown = 30; // 공격 속도 2배 빠르게
                }
            }
            if (e.key === '\\') { // Backslash for P2 defense
                e.preventDefault();
                if (player2.defendCooldown <= 0 && gameMode === 'pvp') {
                    player2.isDefending = true;
                }
            }
        });

        window.addEventListener('keyup', (e) => {
            // Player 1
            if (e.key === 's' || e.key === 'S') {
                player1.isCrouching = false;
                player1.keys.crouch = false;
            }
            if (e.key === 'a' || e.key === 'A') player1.keys.left = false;
            if (e.key === 'd' || e.key === 'D') player1.keys.right = false;
            if (e.key === 'Shift' && e.location === 1) player1.isDefending = false;

            // Player 2
            if (e.key === 'ArrowDown') {
                player2.isCrouching = false;
                player2.keys.crouch = false;
            }
            if (e.key === 'ArrowLeft') player2.keys.left = false;
            if (e.key === 'ArrowRight') player2.keys.right = false;
            if (e.key === '\\') player2.isDefending = false;
        });

        // Mobile controls
        function setupMobileControls() {
            document.getElementById('p1Left').addEventListener('touchstart', () => player1.keys.left = true);
            document.getElementById('p1Left').addEventListener('touchend', () => player1.keys.left = false);
            document.getElementById('p1Right').addEventListener('touchstart', () => player1.keys.right = true);
            document.getElementById('p1Right').addEventListener('touchend', () => player1.keys.right = false);
            document.getElementById('p1Attack').addEventListener('touchstart', () => {
                if (player1.attackCooldown <= 0) {
                    player1.isAttacking = true;
                    player1.attackCooldown = 30;
                }
            });
            document.getElementById('p1Defend').addEventListener('touchstart', () => player1.isDefending = true);
            document.getElementById('p1Defend').addEventListener('touchend', () => player1.isDefending = false);

            document.getElementById('p2Left').addEventListener('touchstart', () => player2.keys.left = true);
            document.getElementById('p2Left').addEventListener('touchend', () => player2.keys.left = false);
            document.getElementById('p2Right').addEventListener('touchstart', () => player2.keys.right = true);
            document.getElementById('p2Right').addEventListener('touchend', () => player2.keys.right = false);
            document.getElementById('p2Attack').addEventListener('touchstart', () => {
                if (player2.attackCooldown <= 0) {
                    player2.isAttacking = true;
                    player2.attackCooldown = 30;
                }
            });
            document.getElementById('p2Defend').addEventListener('touchstart', () => player2.isDefending = true);
            document.getElementById('p2Defend').addEventListener('touchend', () => player2.isDefending = false);
        }
        setupMobileControls();

        function updatePlayer(player) {
            // Crouching - height는 충돌 판정용으로만, 위치는 변경 안함
            if (player.isCrouching && !player.isJumping) {
                player.height = player.crouchingHeight;
            } else {
                player.height = player.standingHeight;
            }

            // Horizontal movement (slower when crouching)
            player.velocityX = 0;
            const moveSpeed = player.isCrouching ? player.speed * 0.5 : player.speed;

            if (player.keys.left) {
                player.velocityX = -moveSpeed;
                player.facing = -1;
                player.walkFrame += 0.2;
            }
            if (player.keys.right) {
                player.velocityX = moveSpeed;
                player.facing = 1;
                player.walkFrame += 0.2;
            }

            // Stop walk animation when not moving
            if (player.velocityX === 0 && !player.isJumping) {
                player.walkFrame = 0;
            }

            // Apply knockback
            if (Math.abs(player.knockbackX) > 0.1) {
                player.x += player.knockbackX;
                player.knockbackX *= 0.8; // Friction
            } else {
                player.knockbackX = 0;
            }

            // Apply gravity
            player.velocityY += player.gravity;

            // Update position
            player.x += player.velocityX;
            player.y += player.velocityY;

            // Ground collision - 항상 서있는 높이 기준으로 계산
            const ground = canvas.height - 100;
            if (player.y + player.standingHeight >= ground) {
                player.y = ground - player.standingHeight;
                player.velocityY = 0;
                player.isJumping = false;
            }

            // Boundary check
            if (player.x < 0) player.x = 0;
            if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;

            // Attack cooldown
            if (player.attackCooldown > 0) {
                player.attackCooldown--;
            }

            // Defend cooldown
            if (player.defendCooldown > 0) {
                player.defendCooldown--;
            }

            // Attack duration
            if (player.isAttacking) {
                setTimeout(() => {
                    player.isAttacking = false;
                }, 200);
            }

            // HP regeneration (3초 후 1초당 2HP씩 회복)
            const currentTime = Date.now();
            if (currentTime - player.lastHitTime > 3000) { // 3초 후
                // 투구 HP 회복 (최대 100까지)
                if (player.helmetHP < player.maxHelmetHP) {
                    player.helmetHP = Math.min(player.maxHelmetHP, player.helmetHP + 0.033); // 60fps 기준 1초당 2HP
                }
                // 갑옷 HP 회복 (최대 100까지)
                if (player.armorHP < player.maxArmorHP) {
                    player.armorHP = Math.min(player.maxArmorHP, player.armorHP + 0.033);
                }
            }
        }

        function checkCollision(attacker, defender) {
            if (!attacker.isAttacking) return false;

            const attackRange = 80;
            const horizontalDist = Math.abs(attacker.x - defender.x);

            if (horizontalDist > attackRange) return false;

            // Attacker is crouching (low attack)
            if (attacker.isCrouching) {
                // Low attacks miss jumping opponents
                if (defender.isJumping) return false;
            }
            // Attacker is standing (high attack)
            else {
                // High attacks miss crouching opponents
                if (defender.isCrouching) return false;
            }

            // Defender is blocking
            if (defender.isDefending) {
                // Successful block - apply defend cooldown
                defender.defendCooldown = 60; // 1 second cooldown
                return 'blocked';
            }

            return true;
        }

        function handleCombat() {
            const damage = 15; // 데미지 양 (100HP / 15 = 약 7번 공격)

            // Player 1 attacks Player 2
            const p1Hit = checkCollision(player1, player2);
            if (p1Hit === true) {
                const centerX = player2.x + player2.width / 2;
                const headY = player2.isCrouching ? player2.y + 10 : player2.y - 15;
                const bodyY = player2.isCrouching ? player2.y + 25 : player2.y + 5;

                // Standing attack = helmet damage, Crouching attack = armor damage
                if (player1.isCrouching) {
                    player2.armorHP = Math.max(0, player2.armorHP - damage);
                    createBreakEffect(centerX, bodyY + 25, 'rgb(192,192,192)', 'armor');
                } else {
                    player2.helmetHP = Math.max(0, player2.helmetHP - damage);
                    createBreakEffect(centerX, headY, 'rgb(255,215,0)', 'helmet');
                }
                player2.lastHitTime = Date.now(); // 회복 타이머 리셋
                playSound('hit');
                updateArmorDisplay();
                player1.isAttacking = false;
            } else if (p1Hit === 'blocked') {
                playSound('defend');
                // Knockback for defender
                player2.knockbackX = (player2.x - player1.x > 0 ? 15 : -15);
                // Attacker gets 2 second cooldown when blocked
                player1.attackCooldown = 120; // 2초
                player1.isAttacking = false;
            }

            // Player 2 attacks Player 1
            const p2Hit = checkCollision(player2, player1);
            if (p2Hit === true) {
                const centerX = player1.x + player1.width / 2;
                const headY = player1.isCrouching ? player1.y + 10 : player1.y - 15;
                const bodyY = player1.isCrouching ? player1.y + 25 : player1.y + 5;

                // Standing attack = helmet damage, Crouching attack = armor damage
                if (player2.isCrouching) {
                    player1.armorHP = Math.max(0, player1.armorHP - damage);
                    createBreakEffect(centerX, bodyY + 25, 'rgb(192,192,192)', 'armor');
                } else {
                    player1.helmetHP = Math.max(0, player1.helmetHP - damage);
                    createBreakEffect(centerX, headY, 'rgb(255,215,0)', 'helmet');
                }
                player1.lastHitTime = Date.now(); // 회복 타이머 리셋
                playSound('hit');
                updateArmorDisplay();
                player2.isAttacking = false;
            } else if (p2Hit === 'blocked') {
                playSound('defend');
                // Knockback for defender
                player1.knockbackX = (player1.x - player2.x > 0 ? 15 : -15);
                // Attacker gets 2 second cooldown when blocked
                player2.attackCooldown = 120; // 2초
                player2.isAttacking = false;
            }
        }

        function updatePlayerAnimation(player) {
            // Determine current animation based on state
            let newAnimation = 'idle';

            if (player.helmetHP <= 0 || player.armorHP <= 0) {
                newAnimation = 'dead';
            } else if (player.isAttacking) {
                newAnimation = player.isJumping ? 'jumpattack' : 'attack';
                // Start slash effect
                if (!player.slashActive) {
                    player.slashActive = true;
                    player.slashFrame = 0;
                }
            } else if (player.isJumping) {
                newAnimation = 'jump';
            } else if (player.velocityX !== 0) {
                newAnimation = 'walk';
            } else {
                newAnimation = 'idle';
            }

            // Reset animation frame if animation changed
            if (newAnimation !== player.currentAnimation) {
                player.currentAnimation = newAnimation;
                player.animationFrame = 0;
            }

            // Advance animation frame
            player.animationFrame += player.animationSpeed;
            if (player.animationFrame >= 10) {
                if (newAnimation === 'attack' || newAnimation === 'jumpattack') {
                    player.animationFrame = 9; // Hold last frame
                    if (!player.isAttacking) {
                        player.animationFrame = 0;
                    }
                } else if (newAnimation === 'dead') {
                    player.animationFrame = 9; // Stay at last frame
                } else {
                    player.animationFrame = 0; // Loop
                }
            }

            // Update slash effect
            if (player.slashActive) {
                player.slashFrame += 0.3;
                if (player.slashFrame >= 6) {
                    player.slashActive = false;
                    player.slashFrame = 0;
                }
            }
        }

        function drawPlayer(player) {
            const centerX = player.x + player.width / 2;

            // Shadow
            ctx.fillStyle = 'rgba(0,0,0,0.3)';
            ctx.beginPath();
            ctx.ellipse(centerX, canvas.height - 95, 50, 10, 0, 0, Math.PI * 2);
            ctx.fill();

            // Get sprite
            const spriteArray = sprites[player.currentAnimation];
            if (!spriteArray || spriteArray.length === 0) return;

            const frameIndex = Math.floor(player.animationFrame);
            const sprite = spriteArray[frameIndex];
            if (!sprite || !sprite.complete) return;

            // Draw sprite with crouch scaling
            ctx.save();
            const spriteWidth = 120;
            let spriteHeight = 120;
            const drawX = player.x - 35;
            let drawY = player.y - 20;

            // Crouch: scale down vertically only
            if (player.isCrouching && !player.isJumping) {
                const crouchScale = 0.7; // 70% height
                const originalHeight = 120;
                spriteHeight = originalHeight * crouchScale;
                // Adjust Y so bottom stays at same position
                drawY = player.y - 20 + (originalHeight - spriteHeight);
            }

            // Apply color filter for player 2 (blue hue shift)
            if (player.color === '#4444ff') {
                ctx.filter = 'hue-rotate(220deg) saturate(1.5)';
            }

            if (player.facing === -1) {
                ctx.translate(drawX + spriteWidth, drawY);
                ctx.scale(-1, 1);
                ctx.drawImage(sprite, 0, 0, spriteWidth, spriteHeight);
            } else {
                ctx.drawImage(sprite, drawX, drawY, spriteWidth, spriteHeight);
            }

            ctx.filter = 'none'; // Reset filter
            ctx.restore();


            // Draw slash effect
            if (player.slashActive && sprites.slash.length > 0) {
                const slashIndex = Math.floor(player.slashFrame);
                if (slashIndex < sprites.slash.length) {
                    const slashSprite = sprites.slash[slashIndex];
                    if (slashSprite && slashSprite.complete) {
                        ctx.save();
                        const slashWidth = 100;
                        const slashHeight = 100;
                        const slashX = centerX + (player.facing * 40) - (slashWidth / 2);
                        const slashY = player.isCrouching ? player.y + 10 : player.y - 10;

                        if (player.facing === -1) {
                            ctx.translate(slashX + slashWidth, slashY);
                            ctx.scale(-1, 1);
                            ctx.globalAlpha = 0.8;
                            ctx.drawImage(slashSprite, 0, 0, slashWidth, slashHeight);
                        } else {
                            ctx.globalAlpha = 0.8;
                            ctx.drawImage(slashSprite, slashX, slashY, slashWidth, slashHeight);
                        }
                        ctx.restore();
                    }
                }
            }

            // Cooldown indicators
            if (player.defendCooldown > 0) {
                ctx.fillStyle = 'rgba(255,0,0,0.7)';
                ctx.font = 'bold 12px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('방어 쿨타임', centerX, player.y - 50);
            }

            if (player.attackCooldown > 60) {
                ctx.fillStyle = 'rgba(255,100,0,0.7)';
                ctx.font = 'bold 12px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('공격 쿨타임', centerX, player.y - 60);
            }

        }

        function drawBackground() {
            // Sky gradient
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#4a5568');
            gradient.addColorStop(1, '#2d3748');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Ground
            ctx.fillStyle = '#1a202c';
            ctx.fillRect(0, canvas.height - 100, canvas.width, 100);

            // Ground line
            ctx.strokeStyle = '#4a5568';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(0, canvas.height - 100);
            ctx.lineTo(canvas.width, canvas.height - 100);
            ctx.stroke();
        }

        // AI opponent logic
        function updateAI() {
            if (gameMode !== 'ai') return;

            const dist = Math.abs(player1.x - player2.x);
            const aiReactionTime = aiDifficulty === 'easy' ? 20 : aiDifficulty === 'medium' ? 10 : 5;

            // Random decision making based on difficulty
            if (Math.random() * 100 < aiReactionTime) {
                // Movement - chase player
                if (dist > 100) {
                    if (player1.x < player2.x) {
                        player2.keys.left = true;
                        player2.keys.right = false;
                    } else {
                        player2.keys.right = true;
                        player2.keys.left = false;
                    }
                } else if (dist < 60) {
                    // Too close, back away
                    if (player1.x < player2.x) {
                        player2.keys.right = true;
                        player2.keys.left = false;
                    } else {
                        player2.keys.left = true;
                        player2.keys.right = false;
                    }
                } else {
                    player2.keys.left = false;
                    player2.keys.right = false;
                }

                // Attack logic
                if (dist < 100 && player2.attackCooldown <= 0 && !player2.isDefending) {
                    // Hard AI: Strategic attack choice
                    if (aiDifficulty === 'hard') {
                        // Attack helmet if armor is broken, vice versa
                        if (player1.armor <= 0 && player1.helmet > 0) {
                            player2.isCrouching = false; // Standing attack for helmet
                        } else if (player1.helmet <= 0 && player1.armor > 0) {
                            player2.isCrouching = true; // Crouching attack for armor
                        } else {
                            // Random mix
                            player2.isCrouching = Math.random() > 0.5;
                        }
                    } else if (aiDifficulty === 'medium') {
                        // Medium: Sometimes crouch attack
                        player2.isCrouching = Math.random() > 0.7;
                    }
                    player2.isAttacking = true;
                    player2.attackCooldown = 30; // 공격 속도 2배 빠르게
                }

                // Defense logic
                if (player1.isAttacking && dist < 100 && player2.defendCooldown <= 0) {
                    const defendChance = aiDifficulty === 'easy' ? 0.3 : aiDifficulty === 'medium' ? 0.6 : 0.85;
                    if (Math.random() < defendChance) {
                        player2.isDefending = true;
                    }
                }

                // Jump/Crouch dodge
                if (player1.isAttacking && dist < 100) {
                    if (aiDifficulty === 'hard') {
                        // Hard AI dodges appropriately
                        if (player1.isCrouching && !player2.isJumping && Math.random() > 0.3) {
                            player2.velocityY = -player2.jumpPower;
                            player2.isJumping = true;
                        } else if (!player1.isCrouching && Math.random() > 0.3) {
                            player2.isCrouching = true;
                            player2.keys.crouch = true;
                        }
                    } else if (aiDifficulty === 'medium' && Math.random() > 0.7) {
                        // Medium AI sometimes dodges
                        if (player1.isCrouching) {
                            player2.velocityY = -player2.jumpPower;
                            player2.isJumping = true;
                        } else {
                            player2.isCrouching = true;
                            player2.keys.crouch = true;
                        }
                    }
                } else {
                    // Release crouch when not dodging
                    if (!player2.isAttacking && player2.isCrouching && Math.random() > 0.8) {
                        player2.isCrouching = false;
                        player2.keys.crouch = false;
                    }
                }
            }

            // Release defense after short time
            if (player2.isDefending && Math.random() > 0.9) {
                player2.isDefending = false;
            }
        }

        function gameLoop() {
            if (gameState === 'playing') {
                drawBackground();

                updatePlayer(player1);
                updatePlayerAnimation(player1);
                if (gameMode === 'ai') {
                    updateAI();
                }
                updatePlayer(player2);
                updatePlayerAnimation(player2);
                handleCombat();
                updateParticles();

                drawPlayer(player1);
                drawPlayer(player2);
                drawParticles();
            }

            requestAnimationFrame(gameLoop);
        }

        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });

        updateWinsDisplay();
        gameLoop();
    </script>
</body>
</html>