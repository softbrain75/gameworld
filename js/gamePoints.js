/**
 * Í≤åÏûÑÏÑ∏ÏÉÅ ÌÜµÌï© Ìè¨Ïù∏Ìä∏ ÏãúÏä§ÌÖú
 * Î™®Îì† Í≤åÏûÑÏóêÏÑú Í≥µÌÜµÏúºÎ°ú ÏÇ¨Ïö©ÌïòÎäî Ìè¨Ïù∏Ìä∏ Í¥ÄÎ¶¨ Î™®Îìà
 */

class GamePointsManager {
    constructor() {
        this.storageKey = 'gameworld_points';
        this.statsKey = 'gameworld_stats';
        this.init();
    }

    init() {
        // Ìè¨Ïù∏Ìä∏ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
        if (!localStorage.getItem(this.storageKey)) {
            this.resetPoints();
        }
        if (!localStorage.getItem(this.statsKey)) {
            this.resetStats();
        }
    }

    // ÌòÑÏû¨ Ï¥ù Ìè¨Ïù∏Ìä∏ Ï°∞Ìöå
    getTotalPoints() {
        return parseInt(localStorage.getItem(this.storageKey)) || 0;
    }

    // Í≤åÏûÑ ÌÜµÍ≥Ñ Ï°∞Ìöå
    getStats() {
        const stats = localStorage.getItem(this.statsKey);
        return stats ? JSON.parse(stats) : this.getDefaultStats();
    }

    // Í∏∞Î≥∏ ÌÜµÍ≥Ñ Íµ¨Ï°∞
    getDefaultStats() {
        return {
            totalGamesPlayed: 0,
            totalPlayTime: 0,
            favoriteGame: null,
            streak: 0,
            lastPlayDate: null,
            achievements: [],
            gameStats: {}
        };
    }

    // Ìè¨Ïù∏Ìä∏ Ï∂îÍ∞Ä
    addPoints(points, gameId, gameInfo = {}) {
        const currentPoints = this.getTotalPoints();
        const newTotal = currentPoints + points;
        
        localStorage.setItem(this.storageKey, newTotal.toString());
        
        // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        this.updateStats(gameId, points, gameInfo);
        
        // Ìè¨Ïù∏Ìä∏ ÌöçÎìù Ïù¥Î≤§Ìä∏ Î∞úÏÉù
        this.triggerPointsEvent(points, newTotal, gameId);
        
        // ÎèÑÏ†ÑÍ≥ºÏ†ú Ï≤¥ÌÅ¨
        this.checkAchievements(newTotal, gameId);
        
        return newTotal;
    }

    // Í≤åÏûÑÎ≥Ñ Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞ Í∑úÏπô
    calculateGamePoints(gameScore, gameId, gameInfo = {}) {
        let basePoints = Math.floor(gameScore / 10); // Í∏∞Î≥∏: Ïä§ÏΩîÏñ¥Ïùò 10%
        let bonusPoints = 0;

        // Í≤åÏûÑÎ≥Ñ Î≥¥ÎÑàÏä§ Í∑úÏπô
        switch(gameId) {
            case 'galaxy_war':
                if (gameInfo.accuracy > 90) bonusPoints += 50;
                if (gameInfo.combo > 20) bonusPoints += 30;
                break;
            case 'drum_beat':
                if (gameInfo.accuracy > 95) bonusPoints += 100;
                if (gameInfo.maxCombo > 50) bonusPoints += 75;
                break;
            case 'piano_tiles':
                if (gameInfo.perfectRatio > 0.8) bonusPoints += 80;
                break;
            default:
                // Í∏∞Î≥∏ Î≥¥ÎÑàÏä§: ÎÜíÏùÄ Ï†êÏàòÏóê ÎåÄÌïú Î≥¥ÎÑàÏä§
                if (gameScore > 10000) bonusPoints += 20;
                if (gameScore > 50000) bonusPoints += 50;
                break;
        }

        // Ïã†Í∏∞Î°ù Î≥¥ÎÑàÏä§
        if (gameInfo.isNewRecord) {
            bonusPoints += Math.floor(basePoints * 0.5);
        }

        // Ïó∞ÏÜç ÌîåÎ†àÏù¥ Î≥¥ÎÑàÏä§
        const stats = this.getStats();
        if (stats.streak > 0) {
            bonusPoints += Math.min(stats.streak * 5, 100);
        }

        return basePoints + bonusPoints;
    }

    // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    updateStats(gameId, points, gameInfo) {
        const stats = this.getStats();
        const now = new Date().toISOString();
        
        stats.totalGamesPlayed++;
        stats.lastPlayDate = now;
        
        // Ïó∞ÏÜç ÌîåÎ†àÏù¥ Ï≤¥ÌÅ¨ (24ÏãúÍ∞Ñ Ïù¥ÎÇ¥)
        const lastPlay = stats.lastPlayDate ? new Date(stats.lastPlayDate) : null;
        const timeDiff = lastPlay ? (new Date() - lastPlay) / (1000 * 60 * 60) : 25;
        
        if (timeDiff <= 24) {
            stats.streak++;
        } else {
            stats.streak = 1;
        }

        // Í≤åÏûÑÎ≥Ñ ÌÜµÍ≥Ñ
        if (!stats.gameStats[gameId]) {
            stats.gameStats[gameId] = {
                playCount: 0,
                totalPoints: 0,
                bestScore: 0,
                totalPlayTime: 0
            };
        }

        stats.gameStats[gameId].playCount++;
        stats.gameStats[gameId].totalPoints += points;
        
        if (gameInfo.score > stats.gameStats[gameId].bestScore) {
            stats.gameStats[gameId].bestScore = gameInfo.score;
        }

        if (gameInfo.playTime) {
            stats.gameStats[gameId].totalPlayTime += gameInfo.playTime;
            stats.totalPlayTime += gameInfo.playTime;
        }

        // Í∞ÄÏû• ÎßéÏù¥ ÌîåÎ†àÏù¥Ìïú Í≤åÏûÑ ÏóÖÎç∞Ïù¥Ìä∏
        const mostPlayedGame = Object.keys(stats.gameStats).reduce((a, b) => 
            stats.gameStats[a].playCount > stats.gameStats[b].playCount ? a : b
        );
        stats.favoriteGame = mostPlayedGame;

        localStorage.setItem(this.statsKey, JSON.stringify(stats));
    }

    // ÎèÑÏ†ÑÍ≥ºÏ†ú Ï≤¥ÌÅ¨
    checkAchievements(totalPoints, gameId) {
        const stats = this.getStats();
        const achievements = [];

        // Ìè¨Ïù∏Ìä∏ Í∏∞Î∞ò ÎèÑÏ†ÑÍ≥ºÏ†ú
        const pointMilestones = [1000, 5000, 10000, 25000, 50000, 100000];
        pointMilestones.forEach(milestone => {
            if (totalPoints >= milestone && !stats.achievements.includes(`points_${milestone}`)) {
                achievements.push({
                    id: `points_${milestone}`,
                    title: `Ìè¨Ïù∏Ìä∏ ÎßàÏä§ÌÑ∞ ${milestone.toLocaleString()}`,
                    description: `Ï¥ù ${milestone.toLocaleString()} Ìè¨Ïù∏Ìä∏ Îã¨ÏÑ±!`,
                    icon: 'üèÜ',
                    points: Math.floor(milestone / 10)
                });
            }
        });

        // Í≤åÏûÑ ÌîåÎ†àÏù¥ ÌöüÏàò ÎèÑÏ†ÑÍ≥ºÏ†ú
        const playMilestones = [10, 50, 100, 500, 1000];
        playMilestones.forEach(milestone => {
            if (stats.totalGamesPlayed >= milestone && !stats.achievements.includes(`games_${milestone}`)) {
                achievements.push({
                    id: `games_${milestone}`,
                    title: `Í≤åÏûÑ Ïï†Ìò∏Í∞Ä ${milestone}`,
                    description: `${milestone}Î≤àÏùò Í≤åÏûÑ ÌîåÎ†àÏù¥ Îã¨ÏÑ±!`,
                    icon: 'üéÆ',
                    points: milestone
                });
            }
        });

        // Ïó∞ÏÜç ÌîåÎ†àÏù¥ ÎèÑÏ†ÑÍ≥ºÏ†ú
        const streakMilestones = [7, 30, 100];
        streakMilestones.forEach(milestone => {
            if (stats.streak >= milestone && !stats.achievements.includes(`streak_${milestone}`)) {
                achievements.push({
                    id: `streak_${milestone}`,
                    title: `${milestone}Ïùº Ïó∞ÏÜç ÌîåÎ†àÏù¥`,
                    description: `${milestone}Ïùº Ïó∞ÏÜçÏúºÎ°ú Í≤åÏûÑÏùÑ ÌîåÎ†àÏù¥ÌñàÏäµÎãàÎã§!`,
                    icon: 'üî•',
                    points: milestone * 10
                });
            }
        });

        // ÏÉàÎ°úÏö¥ ÎèÑÏ†ÑÍ≥ºÏ†úÍ∞Ä ÏûàÏúºÎ©¥ Ï≤òÎ¶¨
        if (achievements.length > 0) {
            achievements.forEach(achievement => {
                stats.achievements.push(achievement.id);
                this.addPoints(achievement.points, 'achievement', achievement);
                this.showAchievementNotification(achievement);
            });
            localStorage.setItem(this.statsKey, JSON.stringify(stats));
        }
    }

    // Ìè¨Ïù∏Ìä∏ ÌöçÎìù Ïù¥Î≤§Ìä∏
    triggerPointsEvent(points, newTotal, gameId) {
        const event = new CustomEvent('pointsEarned', {
            detail: { points, newTotal, gameId }
        });
        window.dispatchEvent(event);
    }

    // ÎèÑÏ†ÑÍ≥ºÏ†ú ÏïåÎ¶º ÌëúÏãú
    showAchievementNotification(achievement) {
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <div class="achievement-content">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-info">
                    <div class="achievement-title">${achievement.title}</div>
                    <div class="achievement-desc">${achievement.description}</div>
                    <div class="achievement-points">+${achievement.points} Ìè¨Ïù∏Ìä∏</div>
                </div>
            </div>
        `;

        // Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä
        const style = document.createElement('style');
        style.textContent = `
            .achievement-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(45deg, #ff6b35, #f7931e);
                color: white;
                padding: 15px;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                z-index: 10000;
                animation: slideInRight 0.5s ease, slideOutRight 0.5s ease 3s forwards;
                max-width: 300px;
            }
            .achievement-content {
                display: flex;
                align-items: center;
                gap: 10px;
            }
            .achievement-icon {
                font-size: 24px;
            }
            .achievement-title {
                font-weight: bold;
                font-size: 14px;
            }
            .achievement-desc {
                font-size: 12px;
                opacity: 0.9;
            }
            .achievement-points {
                font-size: 12px;
                color: #ffd700;
                font-weight: bold;
            }
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(notification);

        // 4Ï¥à ÌõÑ Ï†úÍ±∞
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 4000);
    }

    // Î†àÎ≤® ÏãúÏä§ÌÖú
    getCurrentLevel() {
        const points = this.getTotalPoints();
        return Math.floor(points / 1000) + 1;
    }

    getPointsToNextLevel() {
        const currentLevel = this.getCurrentLevel();
        const pointsForNextLevel = currentLevel * 1000;
        const currentPoints = this.getTotalPoints();
        return pointsForNextLevel - currentPoints;
    }

    // Ìè¨Ïù∏Ìä∏ Ï¥àÍ∏∞Ìôî (Í∞úÎ∞ú/ÌÖåÏä§Ìä∏Ïö©)
    resetPoints() {
        localStorage.setItem(this.storageKey, '0');
    }

    resetStats() {
        localStorage.setItem(this.statsKey, JSON.stringify(this.getDefaultStats()));
    }

    // Î∞±ÏóÖ/Î≥µÏõê
    exportData() {
        return {
            points: this.getTotalPoints(),
            stats: this.getStats()
        };
    }

    importData(data) {
        if (data.points !== undefined) {
            localStorage.setItem(this.storageKey, data.points.toString());
        }
        if (data.stats) {
            localStorage.setItem(this.statsKey, JSON.stringify(data.stats));
        }
    }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
window.gamePoints = new GamePointsManager();

// Í∞ÑÌé∏ ÏÇ¨Ïö© Ìï®ÏàòÎì§
window.addGamePoints = (score, gameId, gameInfo = {}) => {
    const points = window.gamePoints.calculateGamePoints(score, gameId, gameInfo);
    return window.gamePoints.addPoints(points, gameId, { ...gameInfo, score });
};

window.getTotalPoints = () => window.gamePoints.getTotalPoints();
window.getGameStats = () => window.gamePoints.getStats();