<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link rel="manifest" href="manifest.json">
    <meta name="mobile-web-app-capable" content="yes">
    <title>스페이스 러너 - 게임세상</title>
    <style>
        :root {
            --vh: 1vh;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Malgun Gothic', sans-serif;
            background: linear-gradient(135deg, #0a0e27 0%, #1a1f4d 100%);
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .menu-screen, .gameover-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(135deg, #0a0e27 0%, #1a1f4d 50%, #2a2f5d 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .menu-content, .gameover-content {
            background: rgba(10, 14, 39, 0.95);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            color: white;
            max-width: 90%;
            width: 400px;
            border: 3px solid #5a5aff;
            box-shadow: 0 0 40px rgba(90, 90, 255, 0.5);
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #5a5aff, #8a8aff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-icon {
            font-size: 4em;
            margin-bottom: 20px;
            animation: run 1s steps(2) infinite;
        }

        @keyframes run {
            0%, 100% { transform: scaleX(1); }
            50% { transform: scaleX(-1); }
        }

        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: left;
            font-size: 0.9em;
        }

        .instructions p {
            margin: 8px 0;
            line-height: 1.5;
        }

        .btn {
            background: linear-gradient(45deg, #5a5aff, #7a7aff);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.5em;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            box-shadow: 0 0 30px rgba(248, 87, 166, 0.5);
            transition: transform 0.2s;
            font-weight: bold;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .btn:active {
            transform: scale(0.95);
        }

        .back-btn {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            z-index: 100;
            font-size: 0.9em;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .game-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            width: 100%;
            position: relative;
        }

        .score-display {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 2em;
            font-weight: bold;
            color: white;
            text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            z-index: 50;
        }

        canvas {
            flex: 1;
            width: 100%;
            touch-action: none;
            background: linear-gradient(180deg, #87CEEB 0%, #98D8E8 100%);
        }

        .hidden {
            display: none;
        }

        .final-score {
            font-size: 3em;
            margin: 20px 0;
            color: #ffd700;
            text-shadow: 0 0 20px #ffd700;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 20px 0;
        }

        .stat-box {
            background: rgba(248, 87, 166, 0.2);
            padding: 15px;
            border-radius: 10px;
            border: 2px solid rgba(248, 87, 166, 0.5);
        }

        .high-score {
            background: rgba(255, 215, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border: 2px solid rgba(255, 215, 0, 0.5);
        }
    </style>
</head>
<body>
    <a href="index.html" class="back-btn">← 홈으로</a>

    <!-- Menu Screen -->
    <div id="menuScreen" class="menu-screen">
        <div class="menu-content">
            <div class="game-icon">🚀</div>
            <h1>스페이스 러너</h1>
            <p style="color: #5a5aff; margin-bottom: 20px;">우주를 달려라!</p>

            <div id="highScore" class="high-score hidden">
                <div style="opacity: 0.8;">🏆 최고 기록</div>
                <div style="font-size: 2em; font-weight: bold; color: #ffd700;" id="highScoreValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🏃 시작</button>

            <div class="instructions">
                <p style="font-weight: bold; color: #5a5aff; margin-bottom: 10px;">🎮 게임 방법</p>
                <p>👆 화면 터치로 점프</p>
                <p>☄️ 운석 피하기</p>
                <p>⭐ 별 수집</p>
                <p>⚡ 속도가 점점 빨라짐</p>
                <p>🚀 우주를 끝없이 달리세요!</p>
            </div>
        </div>
    </div>

    <!-- Game Over Screen -->
    <div id="gameoverScreen" class="gameover-screen hidden">
        <div class="gameover-content">
            <div class="game-icon">💥</div>
            <h1>게임 오버</h1>

            <div class="final-score" id="finalScore">0</div>
            <div id="newRecord" class="hidden" style="color: #ffd700; font-size: 1.2em; margin: 10px 0;">
                🎉 신기록! 🎉
            </div>

            <div class="stats-grid">
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">거리</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="distanceDisplay">0m</div>
                </div>
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">코인</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="coinsDisplay">0</div>
                </div>
            </div>

            <div id="highScoreDisplay" class="high-score hidden">
                <div style="opacity: 0.8;">최고 기록</div>
                <div style="font-size: 1.5em; font-weight: bold; color: #ffd700;" id="highScoreDisplayValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">🔄 다시하기</button>
        </div>
    </div>

    <!-- Game Screen -->
    <div id="gameContainer" class="game-container hidden">
        <div class="score-display" id="scoreDisplay">0m</div>
        <canvas id="gameCanvas"></canvas>
    </div>

    <script>
        // Viewport height fix
        function setVH() {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        }
        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', setVH);

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Game state
        let gameState = 'menu';
        let score = 0;
        let distance = 0;
        let coins = 0;
        let speed = 8; // Increased from 5 to 8
        let highScore = localStorage.getItem('endlessRunner_highScore') || 0;

        // Player
        let player = {
            x: 100,
            y: 0,
            width: 40,
            height: 40,
            velocityY: 0,
            jumping: false,
            gravity: 0.8,
            onPlatform: false
        };

        // Obstacles, coins, and platforms
        let obstacles = [];
        let coinsList = [];
        let platforms = [];
        let groundY = 0;
        let lastSpawnX = 0;
        let mapIndex = 0;

        // 고정 맵 패턴 (수정 가능)
        // O = 장애물, P = 플랫폼, - = 빈 공간
        const gameMap = [
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            'P', 'P',  // 플랫폼 구간 시작
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            'P',  // 플랫폼
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            'P', 'P', 'P',  // 플랫폼 3개
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-',
            'P', 'P', 'P', 'P', 'P', 'P',  // 플랫폼 연속
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            'P',  // 플랫폼
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            'P', 'P',  // 플랫폼
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P',
            'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'
        ];

        // Set canvas size
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight - 80;
            groundY = canvas.height - 100;
            player.y = groundY - player.height;
        }

        // Initialize
        function init() {
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);

            // Show high score
            if (highScore > 0) {
                document.getElementById('highScore').classList.remove('hidden');
                document.getElementById('highScoreValue').textContent = Math.floor(highScore);
            }

            // Jump controls
            canvas.addEventListener('click', jump);
            canvas.addEventListener('touchstart', (e) => {
                e.preventDefault();
                jump();
            });

            gameLoop();
        }

        // Jump
        function jump() {
            if (gameState !== 'playing') return;
            // Allow jump from ground or platform
            if (!player.jumping || player.onPlatform) {
                player.velocityY = -15;
                player.jumping = true;
                player.onPlatform = false;
            }
        }

        // Start game
        window.startGame = function() {
            document.getElementById('menuScreen').classList.add('hidden');
            document.getElementById('gameoverScreen').classList.add('hidden');
            document.getElementById('gameContainer').classList.remove('hidden');

            gameState = 'playing';
            score = 0;
            distance = 0;
            coins = 0;
            speed = 8;
            obstacles = [];
            coinsList = [];
            platforms = [];
            player.y = groundY - player.height;
            player.velocityY = 0;
            player.jumping = false;
            player.onPlatform = false;
            lastSpawnX = 0;
            mapIndex = 0;
            obstaclePatternIndex = 0;
            platformPatternIndex = 0;

            // Spawn initial content
            for (let i = 0; i < 5; i++) {
                spawnNext();
            }
        };

        // Spawn next (맵 패턴에 따라)
        function spawnNext() {
            const currentMapItem = gameMap[mapIndex % gameMap.length];
            mapIndex++;

            if (currentMapItem === 'O') {
                spawnObstacle();
            } else if (currentMapItem === 'P') {
                spawnPlatform();
            }
        }

        // Obstacle patterns
        let obstaclePatternIndex = 0;
        const obstaclePatterns = [
            // Pattern 1: Single obstacle
            [{gap: 600}],

            // Pattern 2: Three in a row
            [{gap: 500}, {gap: 180}, {gap: 180}],

            // Pattern 3: Long gap
            [{gap: 900}],

            // Pattern 4: Two obstacles
            [{gap: 600}, {gap: 250}],

            // Pattern 5: Close cluster
            [{gap: 550}, {gap: 150}, {gap: 150}, {gap: 150}],

            // Pattern 6: Spaced obstacles
            [{gap: 700}, {gap: 300}],

            // Pattern 7: Single far
            [{gap: 800}]
        ];

        // Spawn obstacle
        function spawnObstacle() {
            const pattern = obstaclePatterns[obstaclePatternIndex % obstaclePatterns.length];
            obstaclePatternIndex++;

            let startX = lastSpawnX + 300;

            pattern.forEach(p => {
                startX += p.gap;

                obstacles.push({
                    x: startX,
                    y: groundY - 40,
                    width: 40,
                    height: 40
                });

                // Sometimes spawn coin above obstacle
                if (Math.random() < 0.4) {
                    coinsList.push({
                        x: startX,
                        y: groundY - 100,
                        width: 30,
                        height: 30,
                        collected: false
                    });
                }

                lastSpawnX = startX;
            });
        }

        // Platform patterns
        let platformPatternIndex = 0;
        const platformPatterns = [
            // Pattern 1: Single high platform
            [{height: 150, width: 100, gap: 600}],

            // Pattern 2: Staircase up
            [{height: 100, width: 80, gap: 200}, {height: 150, width: 80, gap: 180}, {height: 200, width: 80, gap: 180}],

            // Pattern 3: Long gap with single platform
            [{height: 120, width: 60, gap: 800}],

            // Pattern 4: Multiple short platforms
            [{height: 120, width: 60, gap: 250}, {height: 130, width: 60, gap: 200}, {height: 110, width: 60, gap: 220}],

            // Pattern 5: High jump challenge
            [{height: 180, width: 90, gap: 400}, {height: 190, width: 70, gap: 350}],

            // Pattern 6: Low platforms
            [{height: 80, width: 100, gap: 300}, {height: 75, width: 100, gap: 280}],

            // Pattern 7: Single far platform
            [{height: 140, width: 70, gap: 700}],

            // Pattern 8: Close platforms
            [{height: 100, width: 80, gap: 180}, {height: 100, width: 80, gap: 170}, {height: 100, width: 80, gap: 180}]
        ];

        // Spawn platform
        function spawnPlatform() {
            const pattern = platformPatterns[platformPatternIndex % platformPatterns.length];
            platformPatternIndex++;

            let startX = lastSpawnX + 300;

            pattern.forEach((p, index) => {
                startX += p.gap;
                const platformHeight = groundY - p.height;

                platforms.push({
                    x: startX,
                    y: platformHeight,
                    width: p.width,
                    height: 15
                });

                // Spawn coin on platform
                if (Math.random() < 0.6) {
                    coinsList.push({
                        x: startX + p.width / 2 - 15,
                        y: platformHeight - 40,
                        width: 30,
                        height: 30,
                        collected: false
                    });
                }

                lastSpawnX = startX + p.width;
            });
        }

        // Update game
        function updateGame() {
            distance += speed * 0.1;
            score = Math.floor(distance);

            // Increase speed gradually
            speed += 0.001;

            // Update player
            player.velocityY += player.gravity;
            player.y += player.velocityY;

            // Ground collision
            if (player.y >= groundY - player.height) {
                player.y = groundY - player.height;
                player.velocityY = 0;
                player.jumping = false;
            }

            // Platform collision detection
            player.onPlatform = false;
            for (let platform of platforms) {
                if (player.velocityY >= 0 &&
                    player.x + player.width > platform.x &&
                    player.x < platform.x + platform.width &&
                    player.y + player.height >= platform.y &&
                    player.y + player.height <= platform.y + platform.height + 10) {

                    player.y = platform.y - player.height;
                    player.velocityY = 0;
                    player.jumping = false;
                    player.onPlatform = true;
                    break;
                }
            }

            // Update obstacles
            for (let i = obstacles.length - 1; i >= 0; i--) {
                obstacles[i].x -= speed;

                // Check collision
                if (checkCollision(player, obstacles[i])) {
                    endGame();
                    return;
                }

                // Remove off-screen obstacles
                if (obstacles[i].x + obstacles[i].width < 0) {
                    obstacles.splice(i, 1);
                }
            }

            // Update platforms
            for (let i = platforms.length - 1; i >= 0; i--) {
                platforms[i].x -= speed;

                // Remove off-screen platforms
                if (platforms[i].x + platforms[i].width < 0) {
                    platforms.splice(i, 1);
                }
            }

            // Spawn new content when needed
            if (lastSpawnX < canvas.width + 500) {
                spawnNext();
            }

            // Update coins
            for (let i = coinsList.length - 1; i >= 0; i--) {
                coinsList[i].x -= speed;

                // Check collection
                if (!coinsList[i].collected && checkCollision(player, coinsList[i])) {
                    coinsList[i].collected = true;
                    coins++;
                }

                // Remove off-screen coins
                if (coinsList[i].x + coinsList[i].width < 0) {
                    coinsList.splice(i, 1);
                }
            }

            updateUI();
        }

        // Check collision
        function checkCollision(rect1, rect2) {
            return rect1.x < rect2.x + rect2.width &&
                   rect1.x + rect1.width > rect2.x &&
                   rect1.y < rect2.y + rect2.height &&
                   rect1.y + rect1.height > rect2.y;
        }

        // Draw game
        function drawGame() {
            // Draw space background
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, '#0a0e27');
            gradient.addColorStop(0.5, '#1a1f4d');
            gradient.addColorStop(1, '#2a2f5d');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw stars
            ctx.fillStyle = 'white';
            for (let i = 0; i < 50; i++) {
                const x = (i * 50 + distance * 0.5) % canvas.width;
                const y = (i * 37) % canvas.height;
                ctx.beginPath();
                ctx.arc(x, y, 1 + Math.random(), 0, Math.PI * 2);
                ctx.fill();
            }

            // Draw platform (space station floor)
            ctx.fillStyle = '#4a4a6a';
            ctx.fillRect(0, groundY, canvas.width, canvas.height - groundY);

            // Platform lines (tech look)
            ctx.strokeStyle = '#6a6a8a';
            ctx.lineWidth = 2;
            for (let i = 0; i < canvas.width; i += 50) {
                ctx.beginPath();
                ctx.moveTo(i, groundY);
                ctx.lineTo(i, canvas.height);
                ctx.stroke();
            }

            // Platform edge glow
            ctx.fillStyle = '#5a5aff';
            ctx.fillRect(0, groundY, canvas.width, 3);

            // Draw floating platforms
            platforms.forEach(platform => {
                // Platform shadow
                ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
                ctx.fillRect(platform.x + 5, platform.y + 5, platform.width, platform.height);

                // Platform body (space station style)
                const platformGradient = ctx.createLinearGradient(0, platform.y, 0, platform.y + platform.height);
                platformGradient.addColorStop(0, '#6a6a8a');
                platformGradient.addColorStop(1, '#4a4a6a');
                ctx.fillStyle = platformGradient;
                ctx.fillRect(platform.x, platform.y, platform.width, platform.height);

                // Platform edge glow
                ctx.fillStyle = '#5a5aff';
                ctx.fillRect(platform.x, platform.y, platform.width, 2);

                // Tech lines on platform
                ctx.strokeStyle = '#8a8aaa';
                ctx.lineWidth = 1;
                for (let i = 0; i < platform.width; i += 15) {
                    ctx.beginPath();
                    ctx.moveTo(platform.x + i, platform.y);
                    ctx.lineTo(platform.x + i, platform.y + platform.height);
                    ctx.stroke();
                }
            });

            // Draw player
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.beginPath();
            ctx.arc(player.x + player.width / 2, player.y + player.height / 2, player.width / 2, 0, Math.PI * 2);
            ctx.fill();

            ctx.font = '40px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.save();
            ctx.translate(player.x + player.width / 2, player.y + player.height / 2);
            ctx.scale(-1, 1); // Flip horizontally to face right
            ctx.fillText('🏃', 0, 0);
            ctx.restore();

            // Draw obstacles (asteroids/meteors)
            obstacles.forEach(obs => {
                // Meteor glow
                ctx.fillStyle = 'rgba(255, 100, 0, 0.3)';
                ctx.beginPath();
                ctx.arc(obs.x + obs.width / 2, obs.y + obs.height / 2, obs.width / 2 + 5, 0, Math.PI * 2);
                ctx.fill();

                // Meteor body
                ctx.fillStyle = 'rgba(139, 69, 19, 0.9)';
                ctx.beginPath();
                ctx.arc(obs.x + obs.width / 2, obs.y + obs.height / 2, obs.width / 2, 0, Math.PI * 2);
                ctx.fill();

                ctx.font = '40px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText('☄️', obs.x + obs.width / 2, obs.y + obs.height / 2);
            });

            // Draw coins (stars/crystals)
            coinsList.forEach(coin => {
                if (!coin.collected) {
                    // Coin glow
                    ctx.fillStyle = 'rgba(255, 215, 0, 0.4)';
                    ctx.beginPath();
                    ctx.arc(coin.x + coin.width / 2, coin.y + coin.height / 2, coin.width / 2 + 3, 0, Math.PI * 2);
                    ctx.fill();

                    ctx.font = '30px Arial';
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText('⭐', coin.x + coin.width / 2, coin.y + coin.height / 2);
                }
            });
        }

        // Game loop
        function gameLoop() {
            if (gameState === 'playing') {
                updateGame();
                drawGame();
            }

            requestAnimationFrame(gameLoop);
        }

        // Update UI
        function updateUI() {
            document.getElementById('scoreDisplay').textContent = Math.floor(distance) + 'm';
        }

        // End game
        function endGame() {
            gameState = 'gameover';

            const finalScore = Math.floor(distance + coins * 10);

            document.getElementById('finalScore').textContent = finalScore;
            document.getElementById('distanceDisplay').textContent = Math.floor(distance) + 'm';
            document.getElementById('coinsDisplay').textContent = coins;

            const isNewRecord = finalScore > highScore;
            if (isNewRecord) {
                highScore = finalScore;
                localStorage.setItem('endlessRunner_highScore', highScore);
                document.getElementById('newRecord').classList.remove('hidden');
            } else {
                document.getElementById('newRecord').classList.add('hidden');
            }

            if (highScore > 0 && !isNewRecord) {
                document.getElementById('highScoreDisplay').classList.remove('hidden');
                document.getElementById('highScoreDisplayValue').textContent = Math.floor(highScore);
            }

            document.getElementById('gameoverScreen').classList.remove('hidden');
        }

        // Initialize on load
        init();
    </script>
</body>
</html>
