<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link rel="manifest" href="manifest.json">
    <meta name="mobile-web-app-capable" content="yes">
    <title>Ïπ¥Îìú Î∞∞ÌãÄ - Í≤åÏûÑÏÑ∏ÏÉÅ</title>
    <style>
        :root {
            --vh: 1vh;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Malgun Gothic', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .menu-screen, .gameover-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            height: calc(var(--vh, 1vh) * 100);
            background: linear-gradient(135deg, #8e44ad 0%, #3498db 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .menu-content, .gameover-content {
            background: rgba(0, 0, 0, 0.9);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            color: white;
            max-width: 90%;
            width: 400px;
            border: 3px solid #9b59b6;
            box-shadow: 0 0 40px rgba(155, 89, 182, 0.5);
        }

        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #9b59b6, #3498db);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .game-icon {
            font-size: 4em;
            margin-bottom: 20px;
            animation: rotate 3s linear infinite;
        }

        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
            margin: 20px 0;
            text-align: left;
            font-size: 0.9em;
        }

        .instructions p {
            margin: 8px 0;
            line-height: 1.5;
        }

        .btn {
            background: linear-gradient(45deg, #9b59b6, #8e44ad);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.5em;
            border-radius: 50px;
            cursor: pointer;
            margin: 10px;
            box-shadow: 0 0 30px rgba(155, 89, 182, 0.5);
            transition: transform 0.2s;
            font-weight: bold;
        }

        .btn:hover {
            transform: scale(1.05);
        }

        .btn:active {
            transform: scale(0.95);
        }

        .back-btn {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            text-decoration: none;
            z-index: 100;
            font-size: 0.9em;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }

        .game-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            width: 100%;
            position: relative;
            background: linear-gradient(180deg, #1a1a2e 0%, #16213e 100%);
        }

        .battle-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 20px;
            overflow-y: auto;
        }

        .player-section {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .player-info {
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 2px solid rgba(155, 89, 182, 0.5);
        }

        .hp-bar {
            flex: 1;
            height: 30px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            overflow: hidden;
            margin: 0 15px;
            position: relative;
        }

        .hp-fill {
            height: 100%;
            background: linear-gradient(90deg, #e74c3c, #c0392b);
            transition: width 0.3s;
            border-radius: 15px;
        }

        .hp-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: bold;
            text-shadow: 0 0 5px black;
        }

        .cards-area {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .card {
            width: 100px;
            height: 140px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 10px;
            border: 3px solid #9b59b6;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 10px;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 25px rgba(155, 89, 182, 0.5);
        }

        .card.selected {
            border-color: #f39c12;
            box-shadow: 0 0 30px rgba(243, 156, 18, 0.8);
        }

        .card.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .card.disabled:hover {
            transform: none;
        }

        .card-name {
            font-size: 0.9em;
            font-weight: bold;
            color: white;
            text-align: center;
        }

        .card-icon {
            font-size: 3em;
            text-align: center;
        }

        .card-stats {
            display: flex;
            justify-content: space-around;
            font-size: 0.8em;
            color: white;
        }

        .card-stat {
            background: rgba(0, 0, 0, 0.3);
            padding: 3px 8px;
            border-radius: 5px;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
            padding: 15px;
            background: rgba(0, 0, 0, 0.8);
        }

        .action-btn {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 1.2em;
            border-radius: 50px;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
            transition: transform 0.2s;
            font-weight: bold;
        }

        .action-btn:hover {
            transform: scale(1.05);
        }

        .action-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .action-btn:disabled:hover {
            transform: none;
        }

        .hidden {
            display: none;
        }

        .score-display {
            font-size: 3em;
            margin: 20px 0;
            color: #ffd700;
            text-shadow: 0 0 20px #ffd700;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 20px 0;
        }

        .stat-box {
            background: rgba(155, 89, 182, 0.2);
            padding: 15px;
            border-radius: 10px;
            border: 2px solid rgba(155, 89, 182, 0.5);
        }

        .high-score {
            background: rgba(255, 215, 0, 0.2);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            border: 2px solid rgba(255, 215, 0, 0.5);
        }

        .battle-log {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            padding: 20px 40px;
            border-radius: 15px;
            font-size: 2em;
            font-weight: bold;
            color: white;
            border: 3px solid #9b59b6;
            z-index: 50;
            animation: fadeInOut 1.5s;
        }

        @keyframes fadeInOut {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
            50% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
        }
    </style>
</head>
<body>
    <a href="index.html" class="back-btn">‚Üê ÌôàÏúºÎ°ú</a>

    <!-- Menu Screen -->
    <div id="menuScreen" class="menu-screen">
        <div class="menu-content">
            <div class="game-icon">üÉè</div>
            <h1>Ïπ¥Îìú Î∞∞ÌãÄ</h1>
            <p style="color: #9b59b6; margin-bottom: 20px;">Ï†ÑÎûµÏ†ÅÏù∏ Ïπ¥Îìú Ï†ÑÌà¨!</p>

            <div id="highScore" class="high-score hidden">
                <div style="opacity: 0.8;">üèÜ ÏµúÍ≥† Í∏∞Î°ù</div>
                <div style="font-size: 2em; font-weight: bold; color: #ffd700;" id="highScoreValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">‚öîÔ∏è ÏãúÏûë</button>

            <div class="instructions">
                <p style="font-weight: bold; color: #9b59b6; margin-bottom: 10px;">üéÆ Í≤åÏûÑ Î∞©Î≤ï</p>
                <p>üÉè Ïπ¥ÎìúÎ•º ÏÑ†ÌÉùÌï¥ÏÑú Í≥µÍ≤©</p>
                <p>‚öîÔ∏è Í≥µÍ≤©Î†•ÏúºÎ°ú ÏÉÅÎåÄ Ï≤¥Î†• Í∞êÏÜå</p>
                <p>üõ°Ô∏è Î∞©Ïñ¥ Ïπ¥ÎìúÎ°ú Îç∞ÎØ∏ÏßÄ Ï§ÑÏù¥Í∏∞</p>
                <p>üíö Ìûê Ïπ¥ÎìúÎ°ú Ï≤¥Î†• ÌöåÎ≥µ</p>
                <p>üéØ ÏÉÅÎåÄ Ï≤¥Î†•ÏùÑ 0ÏúºÎ°ú ÎßåÎì§Î©¥ ÏäπÎ¶¨</p>
                <p>üß† Ï†ÑÎûµÏ†ÅÏúºÎ°ú Ïπ¥Îìú ÏÑ†ÌÉù!</p>
            </div>
        </div>
    </div>

    <!-- Game Over Screen -->
    <div id="gameoverScreen" class="gameover-screen hidden">
        <div class="gameover-content">
            <div class="game-icon" id="gameoverIcon">üí•</div>
            <h1 id="gameoverTitle">Í≤åÏûÑ Ïò§Î≤Ñ</h1>

            <div class="score-display" id="finalScore">0</div>
            <div id="newRecord" class="hidden" style="color: #ffd700; font-size: 1.2em; margin: 10px 0;">
                üéâ Ïã†Í∏∞Î°ù! üéâ
            </div>

            <div class="stats-grid">
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">ÎùºÏö¥Îìú</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="finalRound">0</div>
                </div>
                <div class="stat-box">
                    <div style="opacity: 0.8; font-size: 0.8em;">ÏäπÎ¶¨</div>
                    <div style="font-size: 1.8em; font-weight: bold;" id="winsCount">0</div>
                </div>
            </div>

            <div id="highScoreDisplay" class="high-score hidden">
                <div style="opacity: 0.8;">ÏµúÍ≥† Í∏∞Î°ù</div>
                <div style="font-size: 1.5em; font-weight: bold; color: #ffd700;" id="highScoreDisplayValue">0</div>
            </div>

            <button class="btn" onclick="startGame()">üîÑ Îã§ÏãúÌïòÍ∏∞</button>
        </div>
    </div>

    <!-- Game Screen -->
    <div id="gameContainer" class="game-container hidden">
        <div class="battle-area">
            <!-- Enemy Section -->
            <div class="player-section">
                <div class="player-info">
                    <div style="font-size: 1.5em;">üëæ Ï†Å</div>
                    <div class="hp-bar">
                        <div class="hp-fill" id="enemyHpBar" style="width: 100%;"></div>
                        <div class="hp-text" id="enemyHpText">100/100</div>
                    </div>
                    <div style="font-size: 1.2em; color: #9b59b6;">ÎùºÏö¥Îìú <span id="round">1</span></div>
                </div>
                <div class="cards-area" id="enemyCards"></div>
            </div>

            <!-- Player Section -->
            <div class="player-section">
                <div class="cards-area" id="playerCards"></div>
                <div class="player-info">
                    <div style="font-size: 1.5em;">‚öîÔ∏è ÌîåÎ†àÏù¥Ïñ¥</div>
                    <div class="hp-bar">
                        <div class="hp-fill" id="playerHpBar" style="width: 100%; background: linear-gradient(90deg, #27ae60, #229954);"></div>
                        <div class="hp-text" id="playerHpText">100/100</div>
                    </div>
                    <div style="font-size: 1.2em; color: #3498db;">ÏóêÎÑàÏßÄ <span id="energy">3</span></div>
                </div>
            </div>
        </div>

        <div class="action-buttons">
            <button class="action-btn" id="attackBtn" onclick="playTurn()">‚öîÔ∏è Í≥µÍ≤©</button>
            <button class="action-btn" id="endTurnBtn" onclick="endTurn()">üîÑ ÌÑ¥ Ï¢ÖÎ£å</button>
        </div>
    </div>

    <script>
        // Viewport height fix
        function setVH() {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        }
        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', setVH);

        // Card types
        const cardTypes = [
            { name: 'Í≤Ä', icon: '‚öîÔ∏è', attack: 15, defense: 0, heal: 0, cost: 1 },
            { name: 'ÎåÄÍ≤Ä', icon: 'üó°Ô∏è', attack: 25, defense: 0, heal: 0, cost: 2 },
            { name: 'Î∞©Ìå®', icon: 'üõ°Ô∏è', attack: 5, defense: 15, heal: 0, cost: 1 },
            { name: 'Ìè¨ÏÖò', icon: 'üíö', attack: 0, defense: 0, heal: 20, cost: 1 },
            { name: 'ÌôîÏÇ¥', icon: 'üèπ', attack: 20, defense: 0, heal: 0, cost: 2 },
            { name: 'ÎßàÎ≤ï', icon: '‚ú®', attack: 30, defense: 0, heal: 0, cost: 3 }
        ];

        // Game state
        let playerHp = 100;
        let playerMaxHp = 100;
        let enemyHp = 100;
        let enemyMaxHp = 100;
        let round = 1;
        let wins = 0;
        let energy = 3;
        let maxEnergy = 3;
        let playerCards = [];
        let enemyCards = [];
        let selectedCard = null;
        let highScore = localStorage.getItem('cardBattle_highScore') || 0;

        // Initialize
        function init() {
            // Show high score
            if (highScore > 0) {
                document.getElementById('highScore').classList.remove('hidden');
                document.getElementById('highScoreValue').textContent = parseInt(highScore).toLocaleString();
            }
        }

        // Generate random card
        function generateCard() {
            return {...cardTypes[Math.floor(Math.random() * cardTypes.length)]};
        }

        // Draw cards
        function drawCards() {
            playerCards = Array(5).fill(null).map(() => generateCard());
            enemyCards = Array(5).fill(null).map(() => generateCard());
            renderCards();
        }

        // Render cards
        function renderCards() {
            // Player cards
            const playerCardsEl = document.getElementById('playerCards');
            playerCardsEl.innerHTML = '';
            playerCards.forEach((card, index) => {
                const cardEl = createCardElement(card, index, true);
                playerCardsEl.appendChild(cardEl);
            });

            // Enemy cards (face down)
            const enemyCardsEl = document.getElementById('enemyCards');
            enemyCardsEl.innerHTML = '';
            enemyCards.forEach(() => {
                const cardEl = document.createElement('div');
                cardEl.className = 'card';
                cardEl.style.background = 'linear-gradient(135deg, #34495e 0%, #2c3e50 100%)';
                cardEl.innerHTML = '<div class="card-icon">üÉè</div>';
                enemyCardsEl.appendChild(cardEl);
            });

            updateUI();
        }

        // Create card element
        function createCardElement(card, index, isPlayer) {
            const cardEl = document.createElement('div');
            cardEl.className = 'card';

            if (isPlayer && card.cost > energy) {
                cardEl.classList.add('disabled');
            }

            if (selectedCard === index) {
                cardEl.classList.add('selected');
            }

            cardEl.innerHTML = `
                <div class="card-name">${card.name}</div>
                <div class="card-icon">${card.icon}</div>
                <div class="card-stats">
                    ${card.attack > 0 ? `<div class="card-stat">‚öîÔ∏è${card.attack}</div>` : ''}
                    ${card.defense > 0 ? `<div class="card-stat">üõ°Ô∏è${card.defense}</div>` : ''}
                    ${card.heal > 0 ? `<div class="card-stat">üíö${card.heal}</div>` : ''}
                    <div class="card-stat">‚ö°${card.cost}</div>
                </div>
            `;

            if (isPlayer) {
                cardEl.addEventListener('click', () => selectCard(index));
            }

            return cardEl;
        }

        // Select card
        function selectCard(index) {
            const card = playerCards[index];
            if (card.cost > energy) return;

            selectedCard = selectedCard === index ? null : index;
            renderCards();
        }

        // Play turn
        window.playTurn = function() {
            if (selectedCard === null) {
                showBattleLog('Ïπ¥ÎìúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!');
                return;
            }

            const playerCard = playerCards[selectedCard];
            if (playerCard.cost > energy) return;

            energy -= playerCard.cost;

            // Enemy selects random card
            const enemyCard = enemyCards[Math.floor(Math.random() * enemyCards.length)];

            // Calculate damage
            let playerDamage = Math.max(0, playerCard.attack - enemyCard.defense);
            let enemyDamage = Math.max(0, enemyCard.attack - playerCard.defense);

            // Apply damage
            enemyHp = Math.max(0, enemyHp - playerDamage);
            playerHp = Math.min(playerMaxHp, playerHp + playerCard.heal - enemyDamage);

            // Show battle log
            if (playerDamage > 0) {
                showBattleLog(`${playerCard.icon} ${playerDamage} Îç∞ÎØ∏ÏßÄ!`);
            } else if (playerCard.heal > 0) {
                showBattleLog(`${playerCard.icon} ${playerCard.heal} ÌöåÎ≥µ!`);
            }

            // Remove used card
            playerCards.splice(selectedCard, 1);
            selectedCard = null;

            updateUI();

            // Check win/lose
            if (enemyHp <= 0) {
                nextRound();
            } else if (playerHp <= 0) {
                endGame(false);
            }
        };

        // End turn
        window.endTurn = function() {
            energy = maxEnergy;
            drawCards();
        };

        // Next round
        function nextRound() {
            wins++;
            round++;
            enemyMaxHp += 20;
            enemyHp = enemyMaxHp;
            playerHp = Math.min(playerMaxHp, playerHp + 30);
            energy = maxEnergy;

            showBattleLog('ÏäπÎ¶¨! üéâ');

            setTimeout(() => {
                drawCards();
            }, 1500);
        }

        // Show battle log
        function showBattleLog(text) {
            const log = document.createElement('div');
            log.className = 'battle-log';
            log.textContent = text;
            document.getElementById('gameContainer').appendChild(log);
            setTimeout(() => log.remove(), 1500);
        }

        // Update UI
        function updateUI() {
            document.getElementById('playerHpBar').style.width = (playerHp / playerMaxHp * 100) + '%';
            document.getElementById('playerHpText').textContent = `${Math.round(playerHp)}/${playerMaxHp}`;
            document.getElementById('enemyHpBar').style.width = (enemyHp / enemyMaxHp * 100) + '%';
            document.getElementById('enemyHpText').textContent = `${Math.round(enemyHp)}/${enemyMaxHp}`;
            document.getElementById('round').textContent = round;
            document.getElementById('energy').textContent = energy;

            document.getElementById('attackBtn').disabled = selectedCard === null;
        }

        // Start game
        window.startGame = function() {
            document.getElementById('menuScreen').classList.add('hidden');
            document.getElementById('gameoverScreen').classList.add('hidden');
            document.getElementById('gameContainer').classList.remove('hidden');

            playerHp = 100;
            playerMaxHp = 100;
            enemyHp = 100;
            enemyMaxHp = 100;
            round = 1;
            wins = 0;
            energy = 3;
            maxEnergy = 3;
            selectedCard = null;

            drawCards();
        };

        // End game
        function endGame(won) {
            const score = wins * 100 + Math.round(playerHp);

            document.getElementById('gameoverIcon').textContent = won ? 'üëë' : 'üí•';
            document.getElementById('gameoverTitle').textContent = won ? 'ÏäπÎ¶¨!' : 'Ìå®Î∞∞!';
            document.getElementById('finalScore').textContent = score.toLocaleString();
            document.getElementById('finalRound').textContent = round;
            document.getElementById('winsCount').textContent = wins;

            const isNewRecord = score > highScore;
            if (isNewRecord) {
                highScore = score;
                localStorage.setItem('cardBattle_highScore', highScore);
                document.getElementById('newRecord').classList.remove('hidden');
            } else {
                document.getElementById('newRecord').classList.add('hidden');
            }

            if (highScore > 0 && !isNewRecord) {
                document.getElementById('highScoreDisplay').classList.remove('hidden');
                document.getElementById('highScoreDisplayValue').textContent = parseInt(highScore).toLocaleString();
            }

            document.getElementById('gameoverScreen').classList.remove('hidden');
        }

        // Initialize on load
        init();
    </script>
</body>
</html>
